openapi: 3.0.0
info:
  contact:
    email: support@graphhopper.com
    name: API Support
    url: https://www.graphhopper.com/
  description: "\nWith the [GraphHopper Directions API](https://www.graphhopper.com/products/)\
    \ you can integrate A-to-B route planning, turn-by-turn navigation,\nroute optimization,\
    \ isochrone calculations and other tools in your application.\n\nThe GraphHopper\
    \ Directions API consists of the following RESTful web services:\n\n * [Routing\
    \ API](#tag/Routing-API),\n * [Route Optimization API](#tag/Route-Optimization-API),\n\
    \ * [Isochrone API](#tag/Isochrone-API),\n * [Map Matching API](#tag/Map-Matching-API),\n\
    \ * [Matrix API](#tag/Matrix-API),\n * [Geocoding API](#tag/Geocoding-API) and\n\
    \ * [Cluster API](#tag/Cluster-API).\n\n# Explore our APIs\n\n## Get started\n\
    \n1. [Sign up for GraphHopper](https://support.graphhopper.com/a/solutions/articles/44001976025)\n\
    2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)\n\
    \nEach API part has its own documentation. Jump to the desired API part and learn\
    \ about the API through the given examples and tutorials.\n\nIn addition, for\
    \ each API there are specific sample requests that you can send via Insomnia or\
    \ Postman to see what the requests and responses look like.\n\n## Insomnia\n\n\
    To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps:\n\
    \n1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/GraphHopper-Direction-API-Insomnia.json).\n\
    2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your\
    \ workspace: Manage Environments -> Base Environment -> `\"api_key\": your API\
    \ key`\n3. Start exploring\n\n![Insomnia](./img/insomnia.png)\n\n## Postman\n\n\
    To explore our APIs with [Postman](https://www.getpostman.com/), follow these\
    \ steps:\n\n1. Import our [request collections](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_collection.json)\
    \ as well as our [environment file](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_environment.json).\n\
    2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your\
    \ environment: `\"api_key\": your API key`\n3. Start exploring\n\n![Postman](./img/postman.png)\n\
    \n## API Client Libraries\n\nTo speed up development and make coding easier, we\
    \ offer the following client libraries:\n\n * [JavaScript client](https://github.com/graphhopper/directions-api-js-client)\
    \ - try the [live examples](https://graphhopper.com/api/1/examples/)\n * [Others](https://github.com/graphhopper/directions-api-clients)\
    \ like C#, Ruby, PHP, Python, ... automatically created for the Route Optimization\
    \ API\n\n### Bandwidth reduction\n\nIf you create your own client, make sure it\
    \ supports http/2 and gzipped responses for best speed.\n\nIf you use the Matrix,\
    \ the Route Optimization API or the Cluster API and want to solve large problems,\
    \ we recommend you to reduce bandwidth\nby [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4)\n\
    and specifying the header as follows: `Content-Encoding: gzip`. This will also\
    \ avoid the HTTP 413 error \"Request Entity Too Large\".\n\n## Contact Us\n\n\
    If you have problems or questions, please read the following information:\n\n\
    - [FAQ](https://graphhopper.com/api/1/docs/FAQ/)\n- [Public forum](https://discuss.graphhopper.com/c/directions-api)\n\
    - [Contact us](https://www.graphhopper.com/contact-form/)\n- [GraphHopper Status\
    \ Page](https://status.graphhopper.com/)\n\nTo stay informed about the latest\
    \ developments, you can\n\n- follow us on [twitter](https://twitter.com/graphhopper/),\n\
    - read [our blog](https://graphhopper.com/blog/),\n- watch [our documentation\
    \ repository](https://github.com/graphhopper/directions-api-doc),\n- sign up for\
    \ our newsletter or\n- [our forum](https://discuss.graphhopper.com/c/directions-api).\n\
    \nSelect the channel you like the most.\n\n\n# Map Data and Routing Profiles\n\
    \nCurrently, our main data source is [OpenStreetMap](https://www.openstreetmap.org).\
    \ We also integrated other network data providers.\nThis chapter gives an overview\
    \ about the options you have.\n\n## OpenStreetMap\n\n#### Geographical Coverage\n\
    \n[OpenStreetMap](https://www.openstreetmap.org) covers the whole world. If you\
    \ want to see for yourself if we can provide data suitable for your region,\n\
    please visit [GraphHopper Maps](https://graphhopper.com/maps/).\nYou can edit\
    \ and modify OpenStreetMap data if you find that important information is missing,\
    \ e.g. a weight limit for a bridge.\n[Here](https://wiki.openstreetmap.org/wiki/Beginners%27_guide)\
    \ is a beginner's guide that shows how to add data. If you have edited data, we\
    \ usually consider your data after 1 week at the latest.\n\n#### Supported Vehicle\
    \ Profiles\n\nThe Routing, Matrix and Route Optimization APIs support the following\
    \ vehicle profiles:\n\nName       | Description           | Restrictions     \
    \         | Icon\n-----------|:----------------------|:--------------------------|:---------------------------------------------------------\n\
    car        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)\n\
    small_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily\
    \ | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck\
    \ image](https://graphhopper.com/maps/img/small_truck.png)\ntruck      | Truck\
    \ like a MAN or Mercedes-Benz Actros | height=3.7m, width=2.6+0.5m, length=12m,\
    \ weight=13000 + 13000 kg, hgv=yes, 3 Axes | ![truck image](https://graphhopper.com/maps/img/truck.png)\n\
    scooter    | Moped mode | Fast inner city, often used for food delivery, is able\
    \ to ignore certain bollards, maximum speed of roughly 50km/h | ![scooter image](https://graphhopper.com/maps/img/scooter.png)\n\
    foot       | Pedestrian or walking without dangerous [SAC-scales](https://wiki.openstreetmap.org/wiki/Key:sac_scale)\
    \ | foot access         | ![foot image](https://graphhopper.com/maps/img/foot.png)\n\
    hike       | Pedestrian or walking with priority for more beautiful hiking tours\
    \ and potentially a bit longer than `foot`. Walking duration is influenced by\
    \ elevation differences.  | foot access         | ![hike image](https://graphhopper.com/maps/img/hike.png)\n\
    bike       | Trekking bike avoiding hills | bike access  | ![bike image](https://graphhopper.com/maps/img/bike.png)\n\
    mtb        | Mountainbike          | bike access         | ![Mountainbike image](https://graphhopper.com/maps/img/mtb.png)\n\
    racingbike| Bike preferring roads | bike access         | ![racingbike image](https://graphhopper.com/maps/img/racingbike.png)\n\
    \nPlease note:\n\n * all motor vehicles (`car`, `small_truck`, `truck` and `scooter`)\
    \ support turn restrictions via `turn_costs=true`\n * the free package supports\
    \ only the vehicle profiles `car`, `bike` or `foot`\n * up to 2 different vehicle\
    \ profiles can be used in a single optimization request. The number of vehicles\
    \ is unaffected and depends on your subscription.\n * we offer custom vehicle\
    \ profiles with different properties, different speed profiles or different access\
    \ options. To find out more about custom profiles, please [contact us](https://www.graphhopper.com/contact-form/).\n\
    \ * a sophisticated `motorcycle` profile is available up on request. It is powered\
    \ by the [Kurviger](https://kurviger.de/en) Routing API and favors curves and\
    \ slopes while avoiding cities and highways.\n \n## TomTom\n\nIf you want to include\
    \ traffic, you can purchase the TomTom Add-on.\nThis Add-on only uses TomTom's\
    \ road network and historical traffic information.\nLive traffic is not yet considered.\
    \ If you are interested to learn how we consider traffic information, we recommend\
    \ that you read [this article](https://www.graphhopper.com/blog/2017/11/06/time-dependent-optimization/).\n\
    \nPlease note the following:\n\n * Currently we only offer this for our [Route\
    \ Optimization API](#tag/Route-Optimization-API).\n * In addition to our terms,\
    \ you need to accept TomTom's [End User License Aggreement](https://www.graphhopper.com/tomtom-end-user-license-agreement/).\n\
    \ * We do *not* use TomTom's web services. We only use their data with our software.\n\
    \ \n[Contact us](https://www.graphhopper.com/contact-form/) for more details.\n\
    \n#### Geographical Coverage\n\nWe offer\n\n- Europe including Russia\n- North,\
    \ Central and South America\n- Saudi Arabia\n- United Arab Emirates\n- South Africa\n\
    - Australia\n\n#### Supported Vehicle Profiles\n\nName       | Description   \
    \        | Restrictions              | Icon\n-----------|:----------------------|:--------------------------|:---------------------------------------------------------\n\
    car        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)\n\
    small_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily\
    \ | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck\
    \ image](https://graphhopper.com/maps/img/small_truck.png)\n"
  termsOfService: https://www.graphhopper.com/terms/
  title: GraphHopper Directions API
  version: 1.0.0
  x-logo:
    url: graphhopper-logo.svg
    altText: GraphHopper
servers:
- url: https://graphhopper.com/api/1
security:
- api_key: []
tags:
- description: |2

    ## Quickstart

    The Route Optimization API can be used to solve [traveling salesman](https://en.wikipedia.org/wiki/Travelling_salesman_problem) or [vehicle routing problems](https://en.wikipedia.org/wiki/Vehicle_routing_problem).
    Solve your first problem by following these steps. If you already have a GraphHopper account, start with step 2.

    1. [Sign up for GraphHopper](https://support.graphhopper.com/a/solutions/articles/44001976025)
    2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)
    3. Download [simple traveling salesman problem](https://gist.github.com/oblonski/fb2f2be534c3ebe7bebaa72151194182) and save it in a local folder
    4. Open your command line, go to that local folder and use cURL ([What is cURL?](https://de.wikipedia.org/wiki/CURL)) as follows:

       ```
       curl -X POST -H "Content-Type: application/json"   "https://graphhopper.com/api/1/vrp?key=YOUR_CREATED_API_KEY" --data "@tsp.json"
       ```

    Alternatively, you can use our Editor to explore that API:

    1. Login to your GraphHopper account
    2. Go to **Editor**
    3. Click the **Optimize** button to solve your first problem
    4. Analyze the solution on the **Map** or as raw **JSON Output**

    If you have successfully solved the first problem, we recommend this tutorial - [Getting Started with the Optimization API](https://www.graphhopper.com/blog/2019/05/17/getting-started-with-the-optimization-api-traveling-salesman-problem/).
    It shows and describes the essential elements to model your vehicle routing problem.

    To explore the full specification, we recommend that you either use our [route editor](https://www.graphhopper.com/blog/2015/07/21/graphhoppers-new-route-optimization-editor/),
    which you can find in our [dashboard](https://graphhopper.com/dashboard/),
    or use a REST client such as Insomnia or Postman, as described [here](https://docs.graphhopper.com/#section/Explore-our-APIs/Insomnia).

    ## Tutorials

    We provide [a number of tutorials](https://www.graphhopper.com/tutorial/) illustrating how to use the Route Optimization API and
    how to model your vehicle routing problems:

    - [Getting Start with the Optimization API - Traveling Salesman Problem](https://www.graphhopper.com/blog/2019/05/17/getting-started-with-the-optimization-api-traveling-salesman-problem/)
    - [How to solve a traveling salesman problem with a week-planning horizon?](https://www.graphhopper.com/blog/2020/07/15/how-to-solve-a-traveling-salesman-problem-with-a-week-planning-horizon-and-driver-shifts/)
    - [How to schedule technicians with skills and multiple dependencies between tasks?](https://www.graphhopper.com/blog/2016/06/03/how-to-route-technicians-with-skills-and-multiple-dependencies-between-tasks/)
    - [What is the difference between the min. of completion time and min. transport time?](https://www.graphhopper.com/blog/2016/06/20/what-is-the-difference-between-the-minimization-of-completion-time-and-minimizing-transport-time/)
    - [How to model multiple delivery routes with a single vehicle?](https://www.graphhopper.com/blog/2016/07/21/how-to-model-multiple-delivery-routes-with-a-single-vehicle/)
  name: Route Optimization API
- description: |2

    ### Introduction

    ![Routing screenshot](./img/routing-example.png)

    The Routing API is part of the GraphHopper Directions API. Routing is the process of finding the best path connecting
    two or more points, where the meaning of ''best'' depends on the vehicle and use case.

    ### Navigation
    If you plan to use the Routing API for navigation, have a look at our [open source demo navigation application](https://github.com/graphhopper/graphhopper-navigation-example) and adapt it to your needs.

    ### Fast
    To get started using this API, just provide two or more points and retrieve the fastest route through the road
    network that connects them. This type of request is heavily optimized for query performance, so it does not
    allow for some advanced features.
    ### Flexible
    Unlock further flexible features via `ch.disable=true`.
  name: Routing API
- description: |2

    ### Introduction

    ![Matrix Example](./img/matrix-example.png)

    The Matrix API is part of the [GraphHopper Directions API](https://graphhopper.com/#directions-api) and with
    it you can calculate many-to-many distances and times a lot more efficient than calling the
    Routing API multiple times.

    In the [Routing API](#tag/Routing-API) we support multiple points, so called 'via points', which results in one
    route being calculated. The Matrix API results in NxM routes, or more precise NxM distances or times being calculated
    but [is a lot faster](https://www.graphhopper.com/blog/2019/06/04/incredibly-fast-distance-matrix-calculations-with-graphhopper/)
    compared to NxM single requests.

    The most simple example is a tourist trying to decide
    which pizza is close to her instead of using beeline distance she can calculate a 1x4 matrix. Or a delivery service
    often in the need of big NxN matrices to solve vehicle routing problems. For example the [GraphHopper Route Optimization API](#tag/Route-Optimization-API)
    uses the Matrix API under the hood to achieve this.

    Some other use cases for the Matrix API:

    * Logistic problems often pick up many items from and deliver them to many locations.
    * Calculating detours with many possible points in-between and selecting the best e.g. interesting for ridesharing or taxi applications. For this 1-to-many requests are necessary.
    * Finding the best tour for a tourist in the need to visit as many points of interests as possible.
    * ...

    ### API Clients and Examples

    See the [clients](#section/API-Clients) section in the main document and [live examples](https://graphhopper.com/api/1/examples/#matrix).

    ### Description

    The Matrix API calculates the well known distance-matrix for a set of points, i.e. it calculates all the distances
    between every point combination. But we do not stop there, we also offer a time-, weight- and route-matrix.
    The weight-matrix can be used as raw input for e.g. a vehicle routing problem ([VRP](http://en.wikipedia.org/wiki/Vehicle_routing_problem))
    and is more precise than a time- or distance-matrix. E.g. for bike routes the actual weight of a route (e.g. the "beauty")
    is what you want to decide if a route is 'better' and not always the taken time or distance.

    A simple illustration for a 3x3 matrix with identical from and to points:

    -          |to_point1|to_point2|to_point3
    :-----------|:--------|:--------|:--------
    from_point1 |0        |1->2     | 1->3
    from_point2 |2->1     |0        | 2->3
    from_point3 |3->1     |3->2     | 0

    A simple illustration for a 1x3 matrix with different start- and end-points:

    -          | to_point1  | to_point2 | t_point3
    :-----------|:-----------|:----------|:--------
    from_pointA |A->1        |A->2       |A->3


    For every route 1->2, 1-3, ... or A->1,A->2,A->3 you can return only the weight, the time and the distance.
    To calculate full routes you can use the [Routing API](#tag/Routing-API).

    ### Limits and Counts

    The cost for one request depends on the number of locations and is documented [here](https://support.graphhopper.com/support/solutions/44000303787#what-is-one-credit).

    One request should not exceed the Matrix API location limit, which depends on the subscription, see the
    pricing tab in our dashboard.
  name: Matrix API
- description: Everything about geocoding
  name: Geocoding API
- description: Everything about isochrones
  name: Isochrone API
- description: Everything about map matching aka "snap to road"
  name: Map Matching API
- description: |2

    ### Introduction

    ![Cluster Example](./img/cluster-solution.jpg)

    It solves the “capacity clustering problem” by assigning a set of customers to a given number of distinct groups (called clusters).
    The API “clusters” by minimizing the total distance from each individual customer to its designated group median.
    It can also consider minimum and maximum capacity restrictions for each group.

    Clustering can be used in many practical applications.
    For example, it can help to plan territories, i.e. territory optimization for field teams with large territories for field workers,
    or to solve large vehicle routing problems (VRP).
  name: Cluster API
paths:
  /route:
    get:
      description: |
        The GET request is the most simple one: just specify the parameter in the URL and you are done.
        Can be tried directly in every browser.
      operationId: getRoute
      parameters:
      - description: |
          The points for which the route should be calculated. Format: `[latitude,longitude]`. Specify at least an origin and a destination. Via points are possible.
          The maximum number depends on your plan.
        explode: true
        in: query
        name: point
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The `point_hint` is typically a road name to which the associated `point` parameter should be snapped to. Specify no `point_hint` parameter or the same number as you have `point` parameters.
        explode: true
        in: query
        name: point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optional parameter to avoid snapping to a certain road class or road environment. Currently supported values are `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`. Multiple values are specified like `snap_prevention=ferry&snap_prevention=motorway`.
        explode: true
        in: query
        name: snap_prevention
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The vehicle profile for which the route should be calculated.
        explode: true
        in: query
        name: vehicle
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: |
          Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.
        explode: true
        in: query
        name: curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: |
          Specifies if turn restrictions should be considered. Enabling this option increases the route computation time. Only supported for motor vehicles and OpenStreetMap.
        explode: true
        in: query
        name: turn_costs
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          type: string
        style: form
      - description: |
          If `true`, a third coordinate, the altitude, is included with all positions in the response.
          This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their
          encodings. Unless you switch off the `points_encoded` parameter, you need special code on the
          client side that can handle three-dimensional coordinates.
          A request can fail if the vehicle profile does not support elevation. See the features object for every vehicle profile.
        explode: true
        in: query
        name: elevation
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optional parameter to retrieve path details. You can request\
          \ additional details for the route: `street_name`, \n`time`, `distance`,\
          \ `max_speed`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`,\
          \ `lanes`, and `surface`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539).\n"
        explode: true
        in: query
        name: details
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Normally, the calculated route will visit the points in the order you specified them.
          If you have more than two points, you can set this parameter to `"true"` and the points may be re-ordered to minimize the total travel time.
          Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits.
        explode: true
        in: query
        name: optimize
        required: false
        schema:
          default: "false"
          type: string
        style: form
      - description: |
          If instructions should be calculated and returned
        explode: true
        in: query
        name: instructions
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If the points for the route should be calculated at all.
        explode: true
        in: query
        name: calc_points
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If `true`, the output will be formatted.
        explode: true
        in: query
        name: debug
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact
          but requires special client code to unpack. (We provide it in our JavaScript client library!)
          Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.
          See the description of the response format for more information.
        explode: true
        in: query
        name: points_encoded
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Use this parameter in combination with one or more parameters from below.
        explode: true
        in: query
        name: ch.disable
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Determines the way the "best" route is calculated. Besides `fastest` you can use `short_fastest` which finds a reasonable balance between the distance influence (`shortest`) and the time (`fastest`). You could also use `shortest` but is deprecated and not recommended for motor vehicles. All except `fastest` require `ch.disable=true`.
        explode: true
        in: query
        name: weighting
        required: false
        schema:
          default: fastest
          type: string
        style: form
      - description: |
          Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points.
          In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree.
          This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`.
        explode: true
        in: query
        name: heading
        required: false
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: |
          Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`.
        explode: true
        in: query
        name: heading_penalty
        required: false
        schema:
          default: 120
          format: int32
          type: integer
        style: form
      - description: |
          If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`.
        explode: true
        in: query
        name: pass_through
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Block road access by specifying a point close to the road segment to be blocked, with the format `lat,lon`.
          You can also block all road segments crossing a geometric shape. Specify a circle using the format `lat,lon,radius`, or a polygon using the format `lat1,lon1,lat2,lon2,...,latN,lonN`.
          You can specify several shapes, separating them with `;`. Requires `ch.disable=true`.
        explode: true
        in: query
        name: block_area
        required: false
        schema:
          type: string
        style: form
      - description: "Specify which road classes and environments you would like to\
          \ avoid. \nPossible values are `motorway`, `steps`, `track`, `toll`, `ferry`,\
          \ `tunnel` and `bridge`.\nSeparate several values with `;`. Obviously not\
          \ all the values make sense for all vehicle profiles e.g. `bike` is already\
          \ forbidden on a `motorway`. Requires `ch.disable=true`.\n"
        explode: true
        in: query
        name: avoid
        required: false
        schema:
          type: string
        style: form
      - description: "Rather than looking for the shortest or fastest path, this parameter\
          \ lets you solve two different problems related to routing:\nWith `alternative_route`,\
          \ we give you not one but several routes that are close to optimal, but\n\
          not too similar to each other. \nWith `round_trip`, the route will get you\
          \ back to where you started. This is meant for fun (think of\na bike trip),\
          \ so we will add some randomness. The `round_trip` option requires `ch.disable=true`.\n\
          You can control both of these features with additional parameters, see below.\
          \ \n"
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - round_trip
          - alternative_route
          type: string
        style: form
      - description: |
          If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`.
        explode: true
        in: query
        name: round_trip.distance
        required: false
        schema:
          default: 10000
          format: int32
          type: integer
        style: form
      - description: |
          If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value.
        explode: true
        in: query
        name: round_trip.seed
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_paths
        required: false
        schema:
          default: 2
          format: int32
          type: integer
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_weight_factor
        required: false
        schema:
          default: 1.4
          type: number
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_share_factor
        required: false
        schema:
          default: 0.6
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Routing Result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Your request is not valid. For example, you specified too few
            or too many points.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Authentication necessary
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: API limit reached.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Internal server error. We get notified automatically and fix
            this asap.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Only a special list of vehicles is supported.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
      summary: GET Route Endpoint
      tags:
      - Routing API
      x-code-samples:
      - lang: Curl
        source: curl "https://graphhopper.com/api/1/route?point=51.131,12.414&point=48.224,3.867&vehicle=car&locale=de&calc_points=false&key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/route?point=51.131,12.414&point=48.224,3.867&vehicle=car&locale=de&calc_points=false&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
    post:
      description: |
        Please see the [GET endpoint](#operation/getRoute) for a simpler method on how to get started.
        If you are familiar with POST requests and JSON then do not hesitate to continue here.

        Especially when you use many locations you should get familiar with this POST endpoint as the GET endpoint
        has an URL length limitation. Additionally the request of this POST endpoint can be compressed and can slightly
        speed up the request.

        To do a request you send JSON data. Both request scenarios GET and POST are identical except that all singular parameter names are named as their plural for a POST request.
        The effected parameters are: `points`, `point_hints` and `snap_preventions`.

        **Please note that in opposite to the GET endpoint, points are specified in the order of `longitude, latitude`**.

        For example `point=10,11&point=20,22` will be converted to the `points` array (plural):
        ```json
        { "points": [[11,10], [22,20]] }
        ```
        Note again that also the order changes from `[latitude,longitude]` to `[longitude,latitude]`
        similar to [GeoJson](http://geojson.org/geojson-spec.html#examples).

        Example:
        ```bash
        curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/route?key=[YOUR_KEY]" -d '{"elevation":false,"points":[[-0.087891,51.534377],[-0.090637,51.467697]],"vehicle":"car"}'
        ```
      operationId: postRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Routing Result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Your request is not valid. For example, you specified too few
            or too many points.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Authentication necessary
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: API limit reached.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Internal server error. We get notified automatically and fix
            this asap.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Only a special list of vehicles is supported.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
      summary: POST Route Endpoint
      tags:
      - Routing API
  /route/info:
    get:
      description: |
        Use this to find out details about the supported vehicle profiles and features, or if you just need to ping the server.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
          description: Coverage Information
      summary: Coverage information
      tags:
      - Routing API
  /isochrone:
    get:
      description: |
        ### Example
        You can get an example response via:

        ```
        curl "https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=[YOUR_KEY]"
        ```

        Don't forget to replace the placeholder with your own key.

        ### Introduction
        ![Isochrone screenshot](./img/isochrone-example.png)

        An isochrone of a location is ''a line connecting points at which a vehicle arrives at the same time'', see Wikipedia.
        With the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.

        ### Use Cases
        Some possible areas in which this API may be useful to you:

        - real estate analysis
        - realtors
        - vehicle scheduling
        - geomarketing
        - reach of electric vehicles
        - transport planning
        - logistics (distribution and retail network planning)

        ### API Clients and Examples
        See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#isochrone).
      operationId: getIsochrone
      parameters:
      - description: Specify the start coordinate
        explode: true
        in: query
        name: point
        required: true
        schema:
          type: string
        style: form
      - description: Specify which time the vehicle should travel. In seconds.
        explode: true
        in: query
        name: time_limit
        required: false
        schema:
          default: 600
          format: int32
          type: integer
        style: form
      - description: Specify which distance the vehicle should travel. In meters.
        explode: true
        in: query
        name: distance_limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |
          The vehicle profile for which the route should be calculated.
        explode: true
        in: query
        name: vehicle
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: Number by which to divide the given `time_limit` to create `buckets`
          nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies
          analogously to `distance_limit`.
        explode: true
        in: query
        name: buckets
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: |
          If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon "inside" to the point.
          Example use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
        explode: true
        in: query
        name: reverse_flow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Use `"shortest"` to get an isodistance line instead of an isochrone.
        explode: true
        in: query
        name: weighting
        required: false
        schema:
          default: fastest
          enum:
          - fastest
          - shortest
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsochroneResponse'
          description: Isochrone Result
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: Isochrone Endpoint
      tags:
      - Isochrone API
  /matrix:
    get:
      description: |
        With this Matrix Endpoint you submit the points and parameters via URL parameters and is the most convenient
        as it works out-of-the-box in the browser. If possible you should
        prefer using the [POST Matrix Endpoint](#operation/postMatrix) that avoids problems with many locations
        and can also gzip the **request**. (Note, that all endpoints return gzipped responses).
      operationId: getMatrix
      parameters:
      - description: Specify multiple points in `latitude,longitude` for which the
          weight-, route-, time- or distance-matrix should be calculated. In this
          case the starts are identical to the destinations. If there are N points,
          then NxN entries will be calculated. The order of the point parameter is
          important. Specify at least three points. Cannot be used together with from_point
          or to_point.
        explode: true
        in: query
        name: point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The starting points for the routes in `latitude,longitude`. E.g.
          if you want to calculate the three routes A-&gt;1, A-&gt;2, A-&gt;3 then
          you have one from_point parameter and three to_point parameters.
        explode: true
        in: query
        name: from_point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The destination points for the routes in `latitude,longitude`.
        explode: true
        in: query
        name: to_point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Optional parameter. Specifies a hint for each `point` parameter
          to prefer a certain street for the closest location lookup. E.g. if there
          is an address or house with two or more neighboring streets you can control
          for which street the closest location is looked up.
        explode: true
        in: query
        name: point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: For the from_point parameter. See point_hint
        explode: true
        in: query
        name: from_point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: For the to_point parameter. See point_hint
        explode: true
        in: query
        name: to_point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`. Multiple values are specified like `snap_prevention=ferry&snap_prevention=motorway`
        explode: true
        in: query
        name: snap_prevention
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Optional parameter. It specifies on which side a point should
          be relative to the driver when she leaves/arrives at a start/target/via
          point. You need to specify this parameter for either none or all points.
          Only supported for motor vehicles and OpenStreetMap.
        explode: true
        in: query
        name: curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: Curbside setting for the from_point parameter. See curbside.
        explode: true
        in: query
        name: from_curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: Curbside setting for the to_point parameter. See curbside.
        explode: true
        in: query
        name: to_curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: Specifies which arrays should be included in the response. Specify
          one or more of the following options 'weights', 'times', 'distances'. To
          specify more than one array use e.g. out_array=times&out_array=distances.
          The units of the entries of distances are meters, of times are seconds and
          of weights is arbitrary and it can differ for different vehicles or versions
          of this API.
        explode: true
        in: query
        name: out_array
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The vehicle profile for which the matrix should be calculated.
        explode: true
        in: query
        name: vehicle
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: Specifies whether or not the matrix calculation should return
          with an error as soon as possible in case some points cannot be found or
          some points are not connected. If set to `false` the time/weight/distance
          matrix will be calculated for all valid points and contain the `null` value
          for all entries that could not be calculated. The `hint` field of the response
          will also contain additional information about what went wrong (see its
          documentation).
        explode: true
        in: query
        name: fail_fast
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Specifies if turn restrictions should be considered. Enabling
          this option increases the matrix computation time. Only supported for motor
          vehicles and OpenStreetMap.
        explode: true
        in: query
        name: turn_costs
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
          description: Matrix API response
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: GET Matrix Endpoint
      tags:
      - Matrix API
      x-code-samples:
      - lang: Curl
        source: curl "https://graphhopper.com/api/1/matrix?point=49.932707,11.588051&point=50.241935,10.747375&point=50.118817,11.983337&type=json&vehicle=car&debug=true&out_array=weights&out_array=times&out_array=distances&key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/matrix?point=49.932707,11.588051&point=50.241935,10.747375&point=50.118817,11.983337&type=json&vehicle=car&debug=true&out_array=weights&out_array=times&out_array=distances&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
    post:
      description: |2

        The [GET endpoint](#operation/getMatrix) has an URL length limitation, which hurts for many locations per request.
        In those cases use this POST endpoint with a JSON as input. The only parameter in the URL will be the key.
        Both request scenarios are identical except that all singular parameter names are named as their plural for a POST request.
        The effected parameters are: `points`, `from_points`, `to_points`, and `out_arrays`. For the remaining parameters
        please refer to the [guide of the GET endpoint](#operation/getMatrix).

        **Please note that in contrast to GET endpoint the points have to be specified as `[longitude, latitude]` array (in that order, similar to [GeoJson](http://geojson.org/geojson-spec.html#examples))**.

        For example the query `point=10,11&point=20,22&vehicle=car` will be converted to the following JSON:
        ```json
        { "points": [[11,10], [22,20]], "vehicle": "car" }
        ```

        A complete curl Example:
        ```bash
        curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix?key=[YOUR_KEY]" -d '{"elevation":false,"out_arrays":["weights", "times"],"from_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"to_points":[[-0.087891,51.534377],[-0.090637,51.467697],[-0.171833,51.521241],[-0.211487,51.473685]],"vehicle":"car"}'
        ```
      operationId: postMatrix
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/MatrixRequest'
              - $ref: '#/components/schemas/SymmetricalMatrixRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
          description: Matrix API response
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: POST Matrix Endpoint
      tags:
      - Matrix API
  /matrix/calculate:
    post:
      description: |
        Prefer the [synchronous endpoint](#operation/postMatrix) and use this Batch endpoint for long running problems only.

        The Batch Matrix endpoint allows using matrices with more locations and works asynchronously - similar to the [Batch Route Optimization endpoint](#operation/asyncVRP):
         * Create a HTTP POST request against `/matrix/calculate` and add the key in the URL: `/matrix/calculate?key=[YOUR_KEY]`. This will give you the `job_id` from the response json like `{ "job_id": "7ac65787-fb99-4e02-a832-2c3010c70097" }`
         * Poll via HTTP GET requests every 500ms against `/matrix/solution/[job_id]`

        Here are some full examples via curl:
        ```bash
        $ curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/matrix/calculate?key=[YOUR_KEY]" -d '{"points":[[13.29895,52.48696],[13.370876,52.489575],[13.439026,52.511206]]}'
        {"job_id":"7ac65787-fb99-4e02-a832-2c3010c70097"}
        ```

        Pick the returned `job_id` and use it in the next GET requests:
        ```bash
        $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
        {"status":"waiting"}
        ```

        When the calculation is finished (`status:finished`) the JSON response will contain the full matrix JSON under `solution`:
        ```bash
        $ curl -X GET "https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]"
        {"solution":{"weights":[[0.0,470.453,945.414],[503.793,0.0,580.871],[970.49,569.511,0.0]],"info":{"copyrights":["GraphHopper","OpenStreetMap contributors"]}},"status":"finished"}
        ```

        Please note that if an error occured while calculation the JSON will not have a status but contain directly the error message e.g.:
        ```json
        {"message":"Cannot find from_points: 1"}
        ```
        And the optional `hints` array.
      operationId: calculateMatrix
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/MatrixRequest'
              - $ref: '#/components/schemas/SymmetricalMatrixRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: Batch Matrix Endpoint
      tags:
      - Matrix API
  /matrix/solution/{jobId}:
    get:
      description: |
        This endpoint returns the solution of a JSON submitted to the Batch Matrix endpoint. You can fetch it with the job_id, you have been sent.
      operationId: getMatrixSolution
      parameters:
      - description: Request solution with jobId
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
          description: A response containing the matrix
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: GET Batch Matrix Endpoint
      tags:
      - Matrix API
  /match:
    post:
      description: |
        ### Example
        You get an example response for a GPX via:

        ```
        curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?vehicle=car&key=[YOUR_KEY]" --data @/path/to/some.gpx
        ```

        A minimal working GPX file looks like
        ```gpx
        <gpx>
         <trk>
          <trkseg>
           <trkpt lat="51.343657" lon="12.360708"></trkpt>
           <trkpt lat="51.343796" lon="12.361337"></trkpt>
           <trkpt lat="51.342784" lon="12.361882"></trkpt>
          </trkseg>
         </trk>
        </gpx>
        ```

        ### Introduction
        ![Map Matching screenshot](./img/map-matching-example.gif)

        The Map Matching API is part of the GraphHopper Directions API and with this API you can snap measured GPS points typically as GPX files to a digital
        road network to e.g. clean data or attach certain data like elevation or turn instructions to it. Read more at Wikipedia.

        In the example screenshot above and demo you see the Map Matching API in action where the black line is the GPS track and the green one is matched result.

        Most of the times, you can simply POST a GPX file, but some of the request parameters of the [Routing API](#tag/Routing-API) apply here, too.

        ### API Clients and Examples
        See the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#map-matching).

        ### Limits and Counts
        The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).

        One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
      operationId: postGPX
      parameters:
      - description: Specify the precision of a point, in meter
        explode: true
        in: query
        name: gps_accuracy
        required: false
        schema:
          type: integer
        style: form
      - description: Specify the vehicle profile like car
        explode: true
        in: query
        name: vehicle
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Routing Result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected Error
      summary: Map-match a GPX file
      tags:
      - Map Matching API
  /geocode:
    get:
      description: |2

        ### Introduction

        ![Geocoding Example](./img/geocoding-example.png)

        _Geocoding_ describes the process of transforming an textual address representation to a coordinate (`latitude,longitude`).
        For example the conversion from `Berlin` to `52.5170365,13.3888599`.

        _Reverse geocoding_ converts a coordinate to a textual address representation or place name. Find out more about Geocoding itself on [Wikipedia](http://en.wikipedia.org/wiki/Geocoding).
      operationId: getGeocode
      parameters:
      - description: If you do forward geocoding, this is `required` and is a textual
          description of the address you are looking for.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Display the search results for the specified locale. Currently
          French (fr), English (en), German (de) and Italian (it) are supported. If
          the locale wasn't found the default (en) is used.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          type: string
        style: form
      - description: Specify the maximum number of results to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: It is `required` to be `true` if you want to do a reverse geocoding
          request. If it is `true`, `point` must be defined as well, and `q` must
          not be used.
        explode: true
        in: query
        name: reverse
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: If `true`, the output will be formatted.
        explode: true
        in: query
        name: debug
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: '_Forward geocoding_: The location bias in the format ''latitude,longitude''
          e.g. point=45.93272,11.58803. _Reverse geocoding_: The location to find
          amenities, cities.'
        explode: true
        in: query
        name: point
        required: false
        schema:
          type: string
        style: form
      - description: "The provider parameter is currently under development and can\
          \ fall back to `default` at any time.\nThe intend is to provide alternatives\
          \ to our default geocoder. Each provider has its own strenghts and might\
          \ fit better for certain scenarios, so it's worth to compare the different\
          \ providers.\nTo try it append the `provider`parameter to the URL like `&provider=nominatim`,\n\
          the result structure should be identical in all cases - if not, please report\
          \ this back to us.\nKeep in mind that some providers do not support certain\
          \ parameters or don't return some fields, for example `osm_id` and `osm_type`\
          \ are not supported by every geocoding provider.\nIf you would like to use\
          \ additional parameters of one of the providers, but it's not available\
          \ for the GraphHopper Geocoding API, yet? Please contact us.\n\nThe credit\
          \ costs can be different for all providers - see [here](https://support.graphhopper.com/support/solutions/articles/44000718211-what-is-one-credit-)\
          \ for more information about it.\n\nCurrently, only the default provider\
          \ and gisgraphy supports autocompletion of partial search strings.\n\nAll\
          \ providers support normal \"forward\" geocoding and reverse geocoding via\
          \ `reverse=true`.\n\n#### Default (`provider=default`)\n\nThis provider\
          \ returns results of our internal geocoding engine, as described above.\n\
          In addition to the above documented parameters the following parameters\
          \ are possible:\n* `bbox` - the expected format is `minLon,minLat,maxLon,maxLat`\n\
          * `osm_tag` - you can filter `key:value` or exclude places with certain\
          \ OpenStreetMap tags `!key:value`. E.g. `osm_tag=tourism:museum` or just\
          \ the key `osm_tag=tourism`. To exclude multiple tags you add multiple `osm_tag`\
          \ parameters.\n\n#### Nominatim (`provider=nominatim`)\n\nThe GraphHopper\
          \ Directions API uses a commercially hosted Nominatim geocoder. You can\
          \ try this provider [here](https://nominatim.openstreetmap.org/). The provider\
          \ does **not** fall under the [restrictions](https://operations.osmfoundation.org/policies/nominatim/)\
          \ of the Nominatim instance hosted by OpenStreetMap.\n\nIn addition to the\
          \ above documented parameters Nominatim allows to use the following parameters,\
          \ which can be used as documented [here](https://github.com/openstreetmap/Nominatim/blob/master/docs/api/Search.md#parameters):\n\
          \n* `viewbox` - the expected format is `minLon,minLat,maxLon,maxLat`\n*\
          \ `bounded` - If 1 and a viewbox is given, restrict the result to items\
          \ contained within that viewbox. Default is 0.\n\n#### Gisgraphy (`provider=gisgraphy`)\n\
          \nThis provider returns results from the Gisgraphy geocoder which you can\
          \ try [here](https://services.gisgraphy.com/static/leaflet/index.html).\n\
          \n**Limitations:** The `locale` parameter is not supported. Gisgraphy does\
          \ not return OSM tags or an extent.\n\nGisgraphy has a special autocomplete\
          \ API, which you can use by adding `autocomplete=true` (does not work with\
          \ `reverse=true`). The autocomplete API is optimized on predicting text\
          \ input, but returns less information.\n\nIn addition to the above documented\
          \ parameters Gisgraphy allows to use the following parameters, which can\
          \ be used as documented [here](https://www.gisgraphy.com/documentation/user-guide.php#geocodingservice):\n\
          \n* `radius` - radius in meters\n* `country` - restrict search for the specified\
          \ country. The value must be the ISO 3166 Alpha 2 code of the country.\n\
          \n#### NetToolKit (`provider=nettoolkit`)\n\nThis provider returns results\
          \ from the NetToolKit provider which is specialized for US addresses and\
          \ provides a wrapper around Nominatim for other addresses. You can try it\
          \ [here](https://www.nettoolkit.com/geo/demo).\n\nThe following additional\
          \ NetToolKit parameters are supported (read [here](https://www.nettoolkit.com/docs/geo/geocoding)\
          \ for more details):\n- `source`: User can choose which source provider\
          \ to geocode the address, this value is \"NetToolKit\" by default\n- `country_code`:\
          \ an iso-3166-2 country code (e.g : US) filter the results to the specify\
          \ country code\n\n**Limitations:** NetToolKit does not support the `locale`\
          \ parameter. NetToolKit does not return OSM tags (e.g. osm_id, osm_type,\
          \ osm_value).\n\n#### OpenCage Data (`provider=opencagedata`)\n\nThis provider\
          \ returns results from the OpenCageData geocoder which you can try [here](https://geocoder.opencagedata.com/demo).\n\
          \nIn addition to the above documented parameters OpenCage Data allows to\
          \ use the following parameters, which can be used as documented [here](https://geocoder.opencagedata.com/api#forward-opt):\n\
          \n* countrycode - The country code is a two letter code as defined by the\
          \ ISO 3166-1 Alpha 2 standard. E.g. gb for the United Kingdom, fr for France,\
          \ us for United States. \n* bounds - the expected format is `minLon,minLat,maxLon,maxLat`\n"
        explode: true
        in: query
        name: provider
        required: false
        schema:
          default: default
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeocodingResponse'
          description: An array found locations
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Unexpected error
      summary: Geocoding Endpoint
      tags:
      - Geocoding API
      x-code-samples:
      - lang: Curl
        source: curl "https://graphhopper.com/api/1/geocode?q=berlin&locale=de&debug=true&key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/geocode?q=berlin&locale=de&debug=true&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
  /vrp:
    post:
      description: |2

        To get started with the Route Optimization API, please read the [introduction](#tag/Route-Optimization-API).

        To solve a new vehicle routing problem, make a HTTP POST to this URL

        ```
        https://graphhopper.com/api/1/vrp?key=<your_key>
        ```

        It returns the solution to this problem in the JSON response.

        Please note that this URL is very well suited to solve minor problems.
        Larger vehicle routing problems, which take longer than 10 seconds to solve, cannot be solved.
        To solve them, please use the [batch mode URL](#operation/asyncVRP) instead.
      operationId: solveVRP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        description: The request that contains the vehicle routing problem to be solved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading the request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: POST route optimization problem
      tags:
      - Route Optimization API
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"Content-Type: application/json\"   \"https://graphhopper.com/api/1/vrp?key=api_key\"\
          \   -d '{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\"\
          ,\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n  \
          \      \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n\
          \  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"\
          visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\"\
          ,\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n \
          \   { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n  \
          \    \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\"\
          : 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}'"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\",\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n        \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\",\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n    { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n      \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\": 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}");
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp?key=api_key")
                  .post(body)
                  .addHeader("content-type", "application/json")
                  .build();

          Response response = client.newCall(request).execute();
  /vrp/optimize:
    post:
      description: |2

        To solve a vehicle routing problem, perform the following steps:

        1.) Make a HTTP POST to this URL

        ```
        https://graphhopper.com/api/1/vrp/optimize?key=<your_key>
        ```

        It returns a job id (job_id).

        2.) Take the job id and fetch the solution for the vehicle routing problem from this URL:

        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```

        We recommend to query the solution every 500ms until it returns 'status=finished'.

        **Note**: Since the workflow is a bit more cumbersome and since you lose some time in fetching the solution, you should always prefer
        the [synchronous endpoint](#operation/solveVRP). You should use the batch mode only for long running problems.
      operationId: asyncVRP
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        description: The request that contains the problem to be solved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server
            - see solution endpoint.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
          links:
            GetSolutionByJobId:
              description: |
                The `job_id` value returned in the response can be used as the `jobId` parameter in `GET /vrp/{jobId}`.
              operationId: getSolution
              parameters:
                jobId: $response.body#/job_id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading client request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: POST route optimization problem (batch mode)
      tags:
      - Route Optimization API
      x-code-samples:
      - lang: Curl
        source: "curl -X POST -H \"Content-Type: application/json\"   \"https://graphhopper.com/api/1/vrp/optimize?key=api_key\"\
          \   -d '{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\"\
          ,\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n  \
          \      \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n\
          \  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"\
          visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\"\
          ,\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n \
          \   { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n  \
          \    \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\"\
          : 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}'"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\",\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n        \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\",\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n    { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n      \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\": 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}");
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp/optimize?key=api_key")
                  .post(body)
                  .addHeader("content-type", "application/json")
                  .build();

          Response response = client.newCall(request).execute();
  /vrp/solution/{jobId}:
    get:
      description: |2

        Take the job id and fetch the solution for the vehicle routing problem from this URL:

        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```

        You get the job id by sending a vehicle routing problem to the [batch mode URL](#operation/asyncVRP).
      operationId: getSolution
      parameters:
      - description: Request solution with jobId
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred on client side such as invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
          description: Requested solution could not be found.
        "500":
          description: Error occurred on server side.
      summary: GET the solution (batch mode)
      tags:
      - Route Optimization API
      x-code-samples:
      - lang: Curl
        source: curl -X GET "https://graphhopper.com/api/1/vrp/solution/job_id?key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp/solution/job_id?key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
  /cluster:
    post:
      description: |2

        The Cluster endpoint is used with a POST request towards
        `https://graphhopper.com/api/1/cluster?key=<your_key>`. The solution will be provided in the JSON response.
        Please note that for problems that take longer than 10 seconds a bad request error is returned.
        In this case please use the asynchronous [Batch Cluster Endpoint](#operation/asyncClusteringProblem) instead.
      operationId: solveClusteringProblem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRequest'
        description: Request object that contains the problem to be solved
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading the request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: POST Cluster Endpoint
      tags:
      - Cluster API
  /cluster/calculate:
    post:
      description: |2

        Prefer the [synchronous endpoint](#operation/solveClusteringProblem) and use this Batch Cluster endpoint for
        long running problems only. The work flow is asynchronous:

        - send a POST request towards `https://graphhopper.com/api/1/cluster/calculate?key=<your_key>` and fetch the job_id.
        - poll the solution every 500ms until it gives `status=finished`. Do this with a GET request
          towards `https://graphhopper.com/api/1/cluster/solution/<job_id>?key=<your_key>`.
      operationId: asyncClusteringProblem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRequest'
        description: Request object that contains the problem to be solved
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server
            - see solution endpoint.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
          links:
            GetSolutionByJobId:
              description: |
                The `job_id` value returned in the response can be used as the `jobId` parameter in `GET /vrp/{jobId}`.
              operationId: getSolution
              parameters:
                jobId: $response.body#/job_id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading client request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: Batch Cluster Endpoint
      tags:
      - Cluster API
  /cluster/solution/{jobId}:
    get:
      description: |
        This endpoint returns the solution of the clustering problems submitted to the [Batch Cluster endpoint](#operation/asyncClusteringProblem).
        You can fetch it with the job_id, you have been sent.
      operationId: getClusterSolution
      parameters:
      - description: Request solution with jobId
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: The credit costs for this request. Note it could be a decimal
                and even negative number, e.g. when an async request failed.
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred on client side such as invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
          description: Requested solution could not be found.
        "500":
          description: Error occurred on server side.
      summary: GET Batch Solution Endpoint
      tags:
      - Cluster API
components:
  schemas:
    ClusterResponse:
      example:
        waiting_time_in_queue: 0.8008281904610115
        processing_time: 4900
        copyrights:
        - GraphHopper
        - OpenStreetMap contributors
        clusters:
        - quantity: 40
          ids:
          - GraphHopper GmbH
        - quantity: 40
          ids:
          - GraphHopper GmbH
        status: finished
      properties:
        copyrights:
          example:
          - GraphHopper
          - OpenStreetMap contributors
          items:
            type: string
          type: array
        status:
          description: Indicates the current status of the job
          enum:
          - waiting_in_queue
          - processing
          - finished
          example: finished
          type: string
        waiting_time_in_queue:
          format: double
          type: number
        processing_time:
          example: 4900
          format: double
          type: number
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
      type: object
    Cluster:
      example:
        quantity: 40
        ids:
        - GraphHopper GmbH
      properties:
        quantity:
          description: Cluster size
          example: 40
          format: int32
          type: number
        ids:
          description: Array of customer ids assigned to this specific cluster
          example:
          - GraphHopper GmbH
          items:
            type: string
          type: array
      type: object
    ClusterRequest:
      example:
        configuration:
          routing:
            profile: car
            cost_per_second: 1
            cost_per_meter: 0
          response_type: json
          clustering:
            max_quantity: 50
            min_quantity: 30
            num_clusters: 10
        customers:
        - address:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          quantity: 10
          id: GraphHopper GmbH
        - address:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          quantity: 10
          id: GraphHopper GmbH
      properties:
        configuration:
          $ref: '#/components/schemas/ClusterConfiguration'
        customers:
          items:
            $ref: '#/components/schemas/ClusterCustomer'
          type: array
      type: object
    ClusterConfiguration:
      example:
        routing:
          profile: car
          cost_per_second: 1
          cost_per_meter: 0
        response_type: json
        clustering:
          max_quantity: 50
          min_quantity: 30
          num_clusters: 10
      properties:
        response_type:
          default: json
          description: Specifies the response format. You can either choose `geojson`
            or `json`.
          example: json
          type: string
        routing:
          $ref: '#/components/schemas/ClusterConfigurationRouting'
        clustering:
          $ref: '#/components/schemas/ClusterConfigurationClustering'
      type: object
    ClusterCustomer:
      example:
        address:
          street_hint: Lindenschmitstraße 52
          lon: 11.53941
          lat: 48.118434
        quantity: 10
        id: GraphHopper GmbH
      properties:
        id:
          description: id of customer
          example: GraphHopper GmbH
          type: string
        address:
          $ref: '#/components/schemas/ClusterCustomerAddress'
        quantity:
          description: demand of customer
          example: 10
          format: int32
          type: number
      type: object
    ClusterCustomerAddress:
      example:
        street_hint: Lindenschmitstraße 52
        lon: 11.53941
        lat: 48.118434
      properties:
        lon:
          description: Longitude
          example: 11.53941
          format: double
          type: number
        lat:
          description: Latitude
          example: 48.118434
          format: double
          type: number
        street_hint:
          description: Optional parameter. Specifies a hint for each address to better
            snap the coordinates (lon,lat) to road network. E.g. if there is an address
            or house with two or more neighboring streets you can control for which
            street the closest location is looked up.
          example: Lindenschmitstraße 52
          type: string
      type: object
    ClusterConfigurationRouting:
      example:
        profile: car
        cost_per_second: 1
        cost_per_meter: 0
      properties:
        profile:
          description: The routing profile for which the travel times and distances
            should be calculated. Other profiles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)
          example: car
          type: string
        cost_per_second:
          description: Cost per second (travel time)
          example: 1
          format: double
          type: number
        cost_per_meter:
          description: Cost per meter (travel distance)
          example: 0
          format: double
          type: number
      type: object
    ClusterConfigurationClustering:
      example:
        max_quantity: 50
        min_quantity: 30
        num_clusters: 10
      properties:
        num_clusters:
          description: Specifies the number of clusters
          example: 10
          format: int32
          type: number
        max_quantity:
          description: Specifies max. quantity in a cluster
          example: 50
          format: int32
          type: number
        min_quantity:
          description: Specifies min. quantity in a cluster
          example: 30
          format: int32
          type: number
      type: object
    GeocodingResponse:
      example:
        $ref: examples/geocodingResponse.json
      properties:
        hits:
          items:
            $ref: '#/components/schemas/GeocodingLocation'
          type: array
        took:
          description: in ms
          format: int64
          type: number
    GeocodingLocation:
      properties:
        point:
          $ref: '#/components/schemas/GeocodingPoint'
        osm_id:
          description: The OSM ID of the entity
          type: string
        osm_type:
          description: N = node, R = relation, W = way
          type: string
        osm_key:
          description: The OSM key of the entity
          type: string
        name:
          description: The name of the entity. Can be a boundary, POI, address, etc
          type: string
        country:
          description: The country of the address
          type: string
        city:
          description: The city of the address
          type: string
        state:
          description: The state of the address
          type: string
        street:
          description: The street of the address
          type: string
        housenumber:
          description: The housenumber of the address
          type: string
        postcode:
          description: The postcode of the address
          type: string
      type: object
    GeocodingPoint:
      properties:
        lat:
          description: Latitude
          format: double
          type: number
        lng:
          description: Longitude
          format: double
          type: number
      type: object
    MatrixRequest:
      example:
        $ref: examples/asymmetricalMatrixRequest.json
      properties:
        from_points:
          description: The starting points for the routes in an array of `[longitude,latitude]`.
            For instance, if you want to calculate three routes from point A such
            as A->1, A->2, A->3 then you have one `from_point` parameter and three
            `to_point` parameters.
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        to_points:
          description: The destination points for the routes in an array of `[longitude,latitude]`.
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        from_point_hints:
          description: See `point_hints`of symmetrical matrix
          items:
            type: string
          type: array
        to_point_hints:
          description: See `point_hints`of symmetrical matrix
          items:
            type: string
          type: array
        snap_preventions:
          description: See `snap_preventions` of symmetrical matrix
          items:
            type: string
          type: array
        from_curbsides:
          description: See `curbsides`of symmetrical matrix
          items:
            type: string
          type: array
        to_curbsides:
          description: See `curbsides`of symmetrical matrix
          items:
            type: string
          type: array
        out_arrays:
          description: Specifies which matrices should be included in the response.
            Specify one or more of the following options `weights`, `times`, `distances`.
            The units of the entries of `distances` are meters, of `times` are seconds
            and of `weights` is arbitrary and it can differ for different vehicles
            or versions of this API.
          items:
            type: string
          type: array
        vehicle:
          allOf:
          - $ref: '#/components/schemas/VehicleProfileId'
          - description: The vehicle profile for which the route should be calculated.
              Other vehicles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)
              for the details.
        fail_fast:
          default: true
          description: Specifies whether or not the matrix calculation should return
            with an error as soon as possible in case some points cannot be found
            or some points are not connected. If set to `false` the time/weight/distance
            matrix will be calculated for all valid points and contain the `null`
            value for all entries that could not be calculated. The `hint` field of
            the response will also contain additional information about what went
            wrong (see its documentation).
          type: boolean
        turn_costs:
          default: false
          description: Specifies if turn restrictions should be considered. Enabling
            this option increases the matrix computation time. Only supported for
            motor vehicles and OpenStreetMap.
          type: boolean
      type: object
    SymmetricalMatrixRequest:
      example:
        $ref: examples/symmetricalMatrixRequest.json
      properties:
        points:
          description: 'Specify multiple points for which the weight-, route-, time-
            or distance-matrix should be calculated as follows: `[longitude,latitude]`.
            In this case the origins are identical to the destinations. Thus, if there
            are N points, NxN entries are calculated. The order of the point parameter
            is important. Specify at least three points. Cannot be used together with
            `from_point` or `to_point.`.'
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        point_hints:
          description: Optional parameter. Specifies a hint for each point in the
            `points` array to prefer a certain street for the closest location lookup.
            E.g. if there is an address or house with two or more neighboring streets
            you can control for which street the closest location is looked up.
          items:
            type: string
          type: array
        snap_preventions:
          description: Optional parameter to avoid snapping to a certain road class
            or road environment. Current supported values `motorway`, `trunk`, `ferry`,
            `tunnel`, `bridge` and `ford`
          items:
            type: string
          type: array
        curbsides:
          description: Optional parameter. It specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. You need to specify this parameter for either none or all points.
            Only supported for motor vehicles and OpenStreetMap.
          items:
            type: string
          type: array
        out_arrays:
          description: Specifies which matrices should be included in the response.
            Specify one or more of the following options `weights`, `times`, `distances`.
            The units of the entries of `distances` are meters, of `times` are seconds
            and of `weights` is arbitrary and it can differ for different vehicles
            or versions of this API.
          items:
            type: string
          type: array
        vehicle:
          allOf:
          - $ref: '#/components/schemas/VehicleProfileId'
          - description: The vehicle profile for which the route should be calculated.
              Other vehicles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)
              for the details.
        fail_fast:
          default: true
          description: Specifies whether or not the matrix calculation should return
            with an error as soon as possible in case some points cannot be found
            or some points are not connected. If set to `false` the time/weight/distance
            matrix will be calculated for all valid points and contain the `null`
            value for all entries that could not be calculated. The `hint` field of
            the response will also contain additional information about what went
            wrong (see its documentation).
          type: boolean
        turn_costs:
          default: false
          description: Specifies if turn restrictions should be considered. Enabling
            this option increases the matrix computation time. Only supported for
            motor vehicles and OpenStreetMap.
          type: boolean
      type: object
    MatrixResponse:
      example:
        distances:
        - - 0
          - 97653
          - 48887
        - - 97426
          - 0
          - 121035
        - - 49006
          - 121049
          - 0
        times:
        - - 0
          - 4197
          - 2994
        - - 4192
          - 0
          - 6074
        - - 3006
          - 6062
          - 0
        weights:
        - - 0
          - 5662.551
          - 3727.147
        - - 5653.807
          - 0
          - 7889.653
        - - 3741.528
          - 7878.365
          - 0
        info:
          copyrights:
          - GraphHopper
          - OpenStreetMap contributors
      properties:
        distances:
          description: The distance matrix for the specified points in the same order
            as the time matrix. The distances are in meters. If `fail_fast=false`
            the matrix will contain `null` for connections that could not be found.
          items:
            items:
              format: int64
              type: number
            type: array
          type: array
        times:
          description: The time matrix for the specified points in the order [[from1->to1,
            from1->to2, ...], [from2->to1, from2->to2, ...], ...]. The times are in
            seconds. If `fail_fast=false` the matrix will contain `null` for connections
            that could not be found.
          items:
            items:
              format: int64
              type: number
            type: array
          type: array
        weights:
          description: The weight matrix for the specified points in the same order
            as the time matrix. The weights for different vehicles can have a different
            unit but the weights array is perfectly suited as input for Vehicle Routing
            Problems as it is currently faster to calculate. If `fail_fast=false`
            the matrix will contain `null` for connections that could not be found.
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        info:
          $ref: '#/components/schemas/ResponseInfo'
        hints:
          description: Optional. Additional response data.
          items:
            $ref: '#/components/schemas/MatrixResponse_hints'
          type: array
      type: object
    RouteRequest:
      example:
        $ref: examples/routeRequest.json
      properties:
        points:
          description: |
            The points for the route in an array of `[longitude,latitude]`. For instance, if you want to calculate a route from point A to B to C
            then you specify `points: [ [A_longitude, A_latitude], [B_longitude, B_latitude], [C_longitude, C_latitude]]
          example:
          - - 11.539421
            - 48.118477
          - - 11.559023
            - 48.12228
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        point_hints:
          description: Optional parameter. Specifies a hint for each point in the
            `points` array to prefer a certain street for the closest location lookup.
            E.g. if there is an address or house with two or more neighboring streets
            you can control for which street the closest location is looked up.
          example:
          - Lindenschmitstraße
          - Thalkirchener Str.
          items:
            type: string
          type: array
        snap_preventions:
          description: Optional parameter to avoid snapping to a certain road class
            or road environment. Current supported values `motorway`, `trunk`, `ferry`,
            `tunnel`, `bridge` and `ford`
          example:
          - motorway
          - ferry
          - tunnel
          items:
            type: string
          type: array
        curbsides:
          description: Optional parameter. It specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. You need to specify this parameter for either none or all points.
            Only supported for motor vehicles and OpenStreetMap.
          example:
          - any
          - right
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        vehicle:
          allOf:
          - $ref: '#/components/schemas/VehicleProfileId'
          - description: The vehicle profile for which the route should be calculated.
              Other vehicles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)
              for the details.
          example: bike
        locale:
          default: en
          description: |
            The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.
          type: string
        elevation:
          default: false
          description: |
            If `true`, a third coordinate, the altitude, is included with all positions in the response.
            This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their
            encodings. Unless you switch off the `points_encoded` parameter, you need special code on the
            client side that can handle three-dimensional coordinates.
            A request can fail if the vehicle profile does not support elevation. See the features object for every vehicle profile.
          type: boolean
        details:
          description: |
            Optional parameter to retrieve path details. You can request additional details for the route: `street_name`,
            `time`, `distance`, `max_speed`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`, `lanes`, and `surface`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539).
          items:
            type: string
          type: array
        optimize:
          default: "false"
          description: |
            Normally, the calculated route will visit the points in the order you specified them.
            If you have more than two points, you can set this parameter to `"true"` and the points may be re-ordered to minimize the total travel time.
            Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits.
          type: string
        instructions:
          default: true
          description: |
            If instructions should be calculated and returned
          type: boolean
        calc_points:
          default: true
          description: |
            If the points for the route should be calculated at all.
          type: boolean
        debug:
          default: false
          description: |
            If `true`, the output will be formatted.
          type: boolean
        points_encoded:
          default: true
          description: |
            Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact
            but requires special client code to unpack. (We provide it in our JavaScript client library!)
            Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.
            See the description of the response format for more information.
          type: boolean
        ch.disable:
          default: false
          description: |
            Use this parameter in combination with one or more parameters from below.
          type: boolean
        weighting:
          default: fastest
          description: |
            Determines the way the ''best'' route is calculated. Default is `fastest`. Other options are `shortest` (e.g. for `vehicle=foot` or `bike`) and `short_fastest` which finds a reasonable balance between `shortest` and `fastest`. Requires `ch.disable=true`.
          type: string
        headings:
          description: |
            Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points.
            In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree.
            This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`.
          items:
            format: int32
            type: integer
          type: array
        heading_penalty:
          default: 120
          description: |
            Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`.
          format: int32
          type: integer
        pass_through:
          default: false
          description: |
            If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`.
          type: boolean
        block_area:
          description: |
            Block road access via a point with the format `latitude,longitude`
            or an area defined by a circle `lat,lon,radius` or a rectangle `lat1,lon1,lat2,lon2`.
            Separate several values with `;`. Requires `ch.disable=true`.
          type: string
        avoid:
          description: |
            Specify which road classes and environments you would like to avoid.
            Possible values are `motorway`, `steps`, `track`, `toll`, `ferry`, `tunnel` and `bridge`.
            Separate several values with `;`. Obviously not all the values make sense for all vehicle profiles e.g. `bike` is already forbidden on a `motorway`. Requires `ch.disable=true`.
          type: string
        algorithm:
          description: |
            Rather than looking for the shortest or fastest path, this lets you solve two different problems related to routing:
            With `round_trip`, the route will get you back to where you started. This is meant for fun (think of
            a bike trip), so we will add some randomness. This requires `ch.disable=true`.
            With `alternative_route`, we give you not one but several routes that are close to optimal, but
            not too similar to each other. You can control both of these features with additional parameters, see below.
          enum:
          - round_trip
          - alternative_route
          type: string
        round_trip.distance:
          default: 10000
          description: |
            If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`.
          format: int32
          type: integer
        round_trip.seed:
          description: |
            If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value.
          format: int64
          type: integer
        alternative_route.max_paths:
          default: 2
          description: |
            If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
          format: int32
          type: integer
        alternative_route.max_weight_factor:
          default: 1.4
          description: |
            If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
          type: number
        alternative_route.max_share_factor:
          default: 0.6
          description: |
            If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives.
          type: number
      type: object
    RouteResponse:
      example:
        $ref: examples/routeResponse.json
      properties:
        paths:
          items:
            $ref: '#/components/schemas/RouteResponsePath'
          type: array
        info:
          $ref: '#/components/schemas/ResponseInfo'
      type: object
    EncodedLineString:
      description: A polyline-encoded list of positions. You'll need to decode this
        string in client code. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/e649aaed8d3f4378bf2d8889bbbc2318261eabb2/web-api/src/main/java/com/graphhopper/http/WebHelper.java#L54)
        and [JavaScript](https://github.com/graphhopper/directions-api-js-client/blob/cf43d1a5bc93a3e8007a44fcfc551117e4fa49bc/src/GHUtil.js#L27).
      type: string
    RouteResponsePath:
      properties:
        distance:
          description: |
            The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
          format: double
          type: number
        time:
          description: |
            The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
          format: int64
          type: integer
        ascend:
          description: |
            The total ascent, in meters.
          format: double
          type: number
        descend:
          description: |
            The total descent, in meters.
          format: double
          type: number
        points:
          allOf:
          - description: |
              The geometry of the route. The format depends on the value of `points_encoded`.
          - anyOf:
            - $ref: '#/components/schemas/EncodedLineString'
            - $ref: '#/components/schemas/LineString'
        snapped_waypoints:
          allOf:
          - description: |
              The snapped input points. The format depends on the value of `points_encoded`.
          - anyOf:
            - $ref: '#/components/schemas/EncodedLineString'
            - $ref: '#/components/schemas/LineString'
        points_encoded:
          description: |
            Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
            of coordinates. See the field description for more information on the two formats.
          type: boolean
        bbox:
          description: |
            The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
          items:
            format: double
            type: number
          type: array
        instructions:
          description: |
            The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
            so be mindful when using them for navigation.
          items:
            $ref: '#/components/schemas/RouteResponsePath_instructions'
          type: array
        details:
          description: |
            Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Straße"],[2,6,"Zollweg"]]}`.
            In this example, the route uses two streets: The first, Frankfurter Straße, is
            used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
            See [here](https://discuss.graphhopper.com/t/2539) for discussion.
          type: object
        points_order:
          description: |
            An array of indices (zero-based), specifiying the order in which the input points are visited.
            Only present if the `optimize` parameter was used.
          items:
            type: integer
          type: array
      type: object
    ResponseInfo:
      description: Additional information for your request
      properties:
        copyrights:
          description: Attribution according to our documentation is necessary if
            no white-label option included.
          items:
            type: string
          type: array
        took:
          format: double
          type: number
      type: object
    InfoResponse:
      description: Information about the server and the geographical area that it
        covers.
      example:
        build_date: 2014-02-21T16:52
        bbox:
        - 13.072624
        - 52.333508
        - 13.763972
        - 52.679616
        version: "0.4"
        features:
          foot:
            elevation: true
          car:
            elevation: false
      properties:
        version:
          description: |
            The version of the GraphHopper server that provided this response. This is not related to the API version.
          type: string
        bbox:
          description: |
            The bounding box of the geographical area covered by this GraphHopper instance. Format: `"minLon,minLat,maxLon,maxLat"
          type: string
        features:
          description: |
            The supported features, such as elevation, per vehicle profile.
          type: object
      type: object
    IsochroneResponse:
      example:
        polygons:
        - properties:
            bucket: 0
          type: Feature
          geometry:
            type: Polygon
            coordinates:
            - - 13.351851
              - 52.51345
            - - 13.350402
              - 52.516949
            - - 13.352598
              - 52.522252
            - - 13.351851
              - 52.51345
      properties:
        polygons:
          description: |
            The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:

            ```
            L.geoJson(json.polygons).addTo(map)
            ```

            The number of polygon is identical to the specified buckets in the query. Every polygon contains the bucket number in the properties section of the GeoJson.
          items:
            $ref: '#/components/schemas/IsochroneResponsePolygon'
          type: array
        copyrights:
          items:
            type: string
          type: array
      type: object
    IsochroneResponsePolygon:
      description: A found path
      properties:
        properties:
          $ref: '#/components/schemas/IsochroneResponsePolygon_properties'
        type:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
      type: object
    LineString:
      properties:
        type:
          type: string
        coordinates:
          description: |
            A list of coordinate pairs or triples, `[lon,lat]` or `[lon,lat,elevation]`.
          items:
            items:
              type: number
            type: array
          type: array
      type: object
    Polygon:
      properties:
        type:
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              type: array
            type: array
          type: array
      type: object
    GHError:
      properties:
        message:
          type: string
        hints:
          description: Optional error information.
          items:
            $ref: '#/components/schemas/GHError_hints'
          type: array
      type: object
    JobId:
      example:
        job_id: 44886560-b584-4da5-b245-768151dacd8f
      properties:
        job_id:
          description: UUID. Unique id for your job/request with which you can fetch
            your solution
          example: 44886560-b584-4da5-b245-768151dacd8f
          format: uuid
          type: string
      type: object
    BadRequest:
      properties:
        message:
          description: Short error message
          example: Bad Request
          type: string
        hints:
          description: Optional error information.
          items:
            $ref: '#/components/schemas/ErrorMessage'
          type: array
        status:
          default: finished
          description: status
          example: finished
          type: string
      type: object
    ErrorMessage:
      properties:
        message:
          description: error message
          example: 'unsupported json property [vehiles]. allowed properties: [vehicles,
            vehicle_types, services, shipments, relations, algorithm, objectives,
            cost_matrices, configuration]'
          type: string
        details:
          description: Details
          example: class java.lang.IllegalArgumentException
          type: string
      type: object
    InternalErrorMessage:
      properties:
        code:
          default: 500
          example: 500
          format: int32
          type: integer
        message:
          description: Details
          example: There has been an internal server error.
          type: string
      type: object
    Request:
      example:
        $ref: examples/routeOptimizationRequest.json
      properties:
        vehicles:
          description: Specifies the available vehicles.
          items:
            $ref: '#/components/schemas/Vehicle'
          minItems: 1
          type: array
        vehicle_types:
          description: Specifies the available vehicle types. These types can be assigned
            to vehicles.
          items:
            $ref: '#/components/schemas/VehicleType'
          type: array
        services:
          description: Specifies the orders of the type "service". These are, for
            example, pick-ups, deliveries or other stops that are to be approached
            by the specified vehicles. Each of these orders contains only one location.
          items:
            $ref: '#/components/schemas/Service'
          type: array
        shipments:
          description: Specifies the available shipments. Each shipment contains a
            pickup and a delivery stop, which must be processed one after the other.
          items:
            $ref: '#/components/schemas/Shipment'
          type: array
        relations:
          description: Defines additional relationships between orders.
          items:
            anyOf:
            - $ref: '#/components/schemas/JobRelation'
            - $ref: '#/components/schemas/GroupRelation'
          type: array
        algorithm:
          $ref: '#/components/schemas/Algorithm'
        objectives:
          description: Specifies an objective function. The vehicle routing problem
            is solved in such a way that this objective function is minimized.
          example:
          - type: min
            value: vehicles
          - type: min
            value: completion_time
          items:
            $ref: '#/components/schemas/Objective'
          type: array
        cost_matrices:
          description: Specifies your own tranport time and distance matrices.
          example:
          - profile: car
            location_ids:
            - start
            - Dammstrasse
            - Bergstrasse
            - Koppstrasse
            - start2
            - nirvana
            data:
              times:
              - - 0
                - 1000
                - 1400
                - 2000
                - 0
                - 4000
              - - 1000
                - 0
                - 1000
                - 2100
                - 1000
                - 4000
              - - 1400
                - 1000
                - 0
                - 1100
                - 1100
                - 4000
              - - 2000
                - 2100
                - 1100
                - 0
                - 1200
                - 4000
              - - 0
                - 1000
                - 1400
                - 2000
                - 0
                - 4000
              - - 4000
                - 4000
                - 4000
                - 4000
                - 4000
                - 4000
              distances:
              - - 0
                - 1000
                - 1400
                - 2000
                - 0
                - 4000
              - - 1000
                - 0
                - 1000
                - 2100
                - 1000
                - 4000
              - - 1400
                - 1000
                - 0
                - 1100
                - 1100
                - 4000
              - - 2000
                - 2100
                - 1100
                - 0
                - 1200
                - 4000
              - - 0
                - 1000
                - 1400
                - 2000
                - 0
                - 4000
              - - 4000
                - 4000
                - 4000
                - 4000
                - 4000
                - 4000
          items:
            $ref: '#/components/schemas/CostMatrix'
          type: array
        configuration:
          $ref: '#/components/schemas/Configuration'
      type: object
    Vehicle:
      properties:
        vehicle_id:
          description: Specifies the ID of the vehicle. Ids must be unique, i.e. if
            there are two vehicles with the same ID, an error is returned.
          example: vehicle-1
          type: string
        type_id:
          default: default-type
          description: The type ID assigns a vehicle type to this vehicle. You can
            specify types in the array of vehicle types. If you omit the type ID,
            the default type is used. The default type is a `car` with a capacity
            of 0.
          example: my-own-type
          type: string
        start_address:
          $ref: '#/components/schemas/Address'
        end_address:
          $ref: '#/components/schemas/Address'
        break:
          anyOf:
          - $ref: '#/components/schemas/TimeWindowBreak'
          - $ref: '#/components/schemas/DriveTimeBreak'
        return_to_depot:
          default: true
          description: If it is false, the algorithm decides where to end the vehicle
            route. It ends in one of your customers' locations. The end is chosen
            such that it contributes to the overall objective function, e.g. min transport_time.
            If it is true, you can either specify a specific end location (which is
            then regarded as end depot) or you can leave it and the driver returns
            to its start location.
          type: boolean
        earliest_start:
          default: 0
          description: Earliest start of vehicle in seconds. It is recommended to
            use the unix timestamp.
          format: int64
          type: integer
        latest_end:
          description: Latest end of vehicle in seconds, i.e. the time the vehicle
            needs to be at its end location at latest.
          format: int64
          type: integer
        skills:
          description: Array of skills, i.e. array of string (not case sensitive).
          example:
          - drilling_maschine
          - screw_driver
          items:
            type: string
          type: array
        max_distance:
          description: Specifies the maximum distance (in meters) a vehicle can go.
          example: 400000
          format: int64
          type: integer
        max_driving_time:
          description: Specifies the maximum drive time (in seconds) a vehicle/driver
            can go, i.e. the maximum time on the road (service and waiting times are
            not included here)
          example: 28800
          format: int64
          type: integer
        max_jobs:
          description: Specifies the maximum number of jobs a vehicle can load.
          example: 12
          format: int32
          type: integer
        min_jobs:
          description: Specifies the minimum number of jobs a vehicle should load.
            This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”,
            we will still try to get as close as possible to this constraint.
          example: 12
          format: int32
          type: integer
        max_activities:
          description: Specifies the maximum number of activities a vehicle can conduct.
          example: 24
          format: int32
          type: integer
        move_to_end_address:
          description: Indicates whether a vehicle should be moved even though it
            has not been assigned any jobs.
          type: boolean
      required:
      - start_address
      - vehicle_id
      type: object
    VehicleProfileId:
      default: car
      enum:
      - car
      - bike
      - foot
      - hike
      - mtb
      - racingbike
      - scooter
      - truck
      - small_truck
      type: string
    Algorithm:
      deprecated: true
      description: Use `objectives` instead.
      properties:
        problem_type:
          enum:
          - min
          - min-max
          type: string
        objective:
          enum:
          - transport_time
          - completion_time
          type: string
      type: object
    Address:
      properties:
        location_id:
          description: Specifies the id of the location.
          example: 550e8400-e29b-11d4-a716-446655440000
          type: string
        name:
          description: Name of location.
          example: Queens Victoria Street 70, Second Floor, Flat 245
          type: string
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
        street_hint:
          description: Optional parameter. Specifies a hint for each address to better
            snap the coordinates (lon,lat) to road network. E.g. if there is an address
            or house with two or more neighboring streets you can control for which
            street the closest location is looked up.
          example: Queens Victoria Street 70
          type: string
        curbside:
          default: any
          description: Optional parameter. Specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. Only supported for motor vehicles and OpenStreetMap.
          enum:
          - right
          - left
          - any
          example: If you would like to arrive at this address without having to cross
            the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          type: string
      required:
      - lat
      - location_id
      - lon
      type: object
    ResponseAddress:
      description: Address of activity
      properties:
        location_id:
          description: Specifies the id of the location.
          example: 550e8400-e29b-11d4-a716-446655440000
          type: string
        name:
          description: Name of location.
          example: Queens Victoria Street 70, Second Floor, Flat 245
          type: string
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
        street_hint:
          description: Optional parameter. Specifies a hint for each address to better
            snap the coordinates (lon,lat) to road network. E.g. if there is an address
            or house with two or more neighboring streets you can control for which
            street the closest location is looked up.
          example: Queens Victoria Street 70
          type: string
        snapped_waypoint:
          $ref: '#/components/schemas/SnappedWaypoint'
      type: object
    SnappedWaypoint:
      description: Access point to the (road)network. It is only available if `return_snapped_waypoints`
        is true (be default it is false).
      properties:
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
      type: object
    DriveTimeBreak:
      properties:
        duration:
          description: Specifies the duration of the break in seconds.
          example: 2700
          format: int64
          type: integer
        max_driving_time:
          description: Specifies the max driving time (in a row) without break in
            seconds.
          example: 14400
          format: int64
          type: integer
        initial_driving_time:
          description: Specifies the initial (current) driving time of a driver to
            allow dynamic adaptations in seconds.
          example: 3600
          format: int64
          type: integer
        possible_split:
          description: Array specifying how a break duration (in seconds) can be split
            into several smaller breaks
          example:
          - 900
          - 1800
          items:
            format: int64
            type: integer
          type: array
      required:
      - duration
      - max_driving_time
      type: object
    TimeWindowBreak:
      properties:
        earliest:
          description: Specifies the earliest start time of the break in seconds.
          example: 1550136467
          format: int64
          type: integer
        latest:
          description: Specifies the latest start time of break in seconds.
          example: 1550148467
          format: int64
          type: integer
        duration:
          description: Specifies the duration of the break in seconds.
          example: 2700
          format: int64
          type: integer
      required:
      - duration
      - earliest
      - latest
      type: object
    VehicleType:
      properties:
        type_id:
          description: Specifies the id of the vehicle type. If a vehicle needs to
            be of this type, it should refer to this with its type_id attribute.
          example: my-own-type
          type: string
        profile:
          allOf:
          - description: Specifies the vehicle profile of this type. The profile is
              used to determine the network, speed and other physical attributes to
              use for routing the vehicle.
          - $ref: '#/components/schemas/VehicleProfileId'
        capacity:
          default:
          - 0
          description: Specifies an array of capacity dimension values which need
            to be int values. For example, if there are two dimensions such as volume
            and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum
            volume of 1000 and a maximum weight of 300.
          example:
          - 100
          - 500
          items:
            format: int32
            type: integer
          type: array
        speed_factor:
          default: 1
          description: Specifies a speed factor for this vehicle type. If the vehicle
            that uses this type needs to be only half as fast as what is actually
            calculated with our routing engine then set the speed factor to 0.5.
          format: double
          type: number
        service_time_factor:
          default: 1
          description: Specifies a service time factor for this vehicle type. If the
            vehicle/driver that uses this type is able to conduct the service as double
            as fast as it is determined in the corresponding service or shipment then
            set it to 0.5.
          format: double
          type: number
        cost_per_meter:
          description: '**_BETA feature_**! Cost parameter per distance unit, here
            meter is used'
          format: double
          type: number
        cost_per_second:
          description: '**_BETA feature_**! Cost parameter per time unit, here second
            is used'
          format: double
          type: number
        cost_per_activation:
          description: '**_BETA feature_**! Cost parameter vehicle activation, i.e.
            fixed costs per vehicle'
          format: double
          type: number
        consider_traffic:
          default: false
          description: Specifies whether traffic should be considered. if "tomtom"
            is used and this is false, free flow travel times from "tomtom" are calculated.
            If this is true, historical traffic info are used. We do not yet have
            traffic data for "openstreetmap", thus, setting this true has no effect
            at all.
          type: boolean
        network_data_provider:
          default: openstreetmap
          description: Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)
            (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom)
            (add-on required).
          enum:
          - openstreetmap
          - tomtom
          type: string
      required:
      - type_id
      type: object
    Service:
      properties:
        id:
          description: Specifies the id of the service. Ids need to be unique so there
            must not be two services/shipments with the same id.
          example: 7fe77504-7df8-4497-843c-02d70b6490ce
          type: string
        type:
          default: service
          description: Specifies type of service. This makes a difference if items
            are loaded or unloaded, i.e. if one of the size dimensions > 0. If it
            is specified as `service` or `pickup`, items are loaded and will stay
            in the vehicle for the rest of the route (and thus consumes capacity for
            the rest of the route). If it is a `delivery`, items are implicitly loaded
            at the beginning of the route and will stay in the route until delivery
            (and thus releases capacity for the rest of the route).
          enum:
          - service
          - pickup
          - delivery
          example: delivery
          type: string
        priority:
          default: 2
          description: Specifies the priority. Can be 1 = high priority to 10 = low
            priority. Often there are more services/shipments than the available vehicle
            fleet can handle. Then you can set priorities to differentiate high priority
            tasks from those that could be left unassigned. I.e. the lower the priority
            the earlier these tasks are omitted in the solution.
          example: 1
          format: int32
          type: integer
        name:
          description: Meaningful name for service, e.g. `"deliver pizza"`.
          example: delivery pizza
          type: string
        address:
          $ref: '#/components/schemas/Address'
        duration:
          default: 0
          description: Specifies the duration of the service in seconds, i.e. how
            long it takes at the customer site.
          example: 1800
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        preparation_time:
          default: 0
          description: Specifies the preparation time in seconds. It can be used to
            model parking lot search time since if you have 3 identical locations
            in a row, it only falls due once.
          example: 300
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        time_windows:
          description: Specifies an array of time window objects (see time_window
            object below). Specify the time either with the recommended Unix time
            stamp (the number of seconds since 1970-01-01) or you can also count the
            seconds relative to Monday morning 00:00 and define the whole week in
            seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour
            = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour
            + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more
            information.
          example:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          items:
            $ref: '#/components/schemas/TimeWindow'
          type: array
        size:
          default:
          - 0
          description: Size can have multiple dimensions and should be in line with
            the capacity dimension array of the vehicle type. For example, if the
            item that needs to be delivered has two size dimension, volume and weight,
            then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight
            of 5.
          example:
          - 30
          - 5
          - 1
          items:
            format: int32
            type: integer
          type: array
        required_skills:
          description: 'Specifies an array of required skills, i.e. array of string
            (not case sensitive). For example, if this service needs to be conducted
            by a technician having a `drilling_machine` and a `screw_driver` then
            specify the array as follows: `["drilling_machine","screw_driver"]`. This
            means that the service can only be done by a vehicle (technician) that
            has the skills `drilling_machine` AND `screw_driver` in its skill array.
            Otherwise it remains unassigned.'
          example:
          - drilling_machine
          - screw_driver
          items:
            type: string
          type: array
        allowed_vehicles:
          description: 'Specifies an array of allowed vehicles, i.e. array of vehicle
            ids. For example, if this service can only be conducted EITHER by `technician_peter`
            OR `technician_stefan` specify this as follows: `["technician_peter","technician_stefan"]`.'
          example:
          - technician_peter
          - technician_stefan
          items:
            type: string
          type: array
        disallowed_vehicles:
          description: Specifies an array of disallowed vehicles, i.e. array of vehicle
            ids.
          example:
          - driver-A
          - driver-B
          items:
            type: string
          type: array
        max_time_in_vehicle:
          description: Specifies the maximum time in seconds a delivery can stay in
            the vehicle. Currently, it only works with services of "type":"delivery".
          example: 900
          format: int64
          type: integer
        group:
          description: Group this service belongs to. See the group relation and [this
            post](https://discuss.graphhopper.com/t/4040) on how to utilize this.
          example: group-A
          type: string
      required:
      - id
      type: object
    Shipment:
      properties:
        id:
          description: Specifies the id of the shipment. Ids need to be unique so
            there must not be two services/shipments with the same id.
          example: 7fe77504-7df8-4497-843c-02d70b6490ce
          type: string
        name:
          description: Meaningful name for shipment, e.g. "pickup and deliver pizza
            to Peter".
          example: pickup and deliver pizza to Peter
          type: string
        priority:
          default: 2
          description: Specifies the priority. Can be 1 = high priority to 10 = low
            priority. Often there are more services/shipments than the available vehicle
            fleet can handle. Then you can set priorities to differentiate high priority
            tasks from those that could be left unassigned. I.e. the lower the priority
            the earlier these tasks are omitted in the solution.
          example: 1
          format: int32
          type: integer
        pickup:
          $ref: '#/components/schemas/Stop'
        delivery:
          $ref: '#/components/schemas/Stop'
        size:
          default:
          - 0
          description: Size can have multiple dimensions and should be in line with
            the capacity dimension array of the vehicle type. For example, if the
            item that needs to be delivered has two size dimension, volume and weight,
            then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight
            of 5.
          example:
          - 3
          items:
            format: int32
            type: integer
          type: array
        required_skills:
          description: 'Specifies an array of required skills, i.e. array of string
            (not case sensitive). For example, if this shipment needs to be conducted
            by a technician having a `drilling_machine` and a `screw_driver` then
            specify the array as follows: `["drilling_machine","screw_driver"]`. This
            means that the service can only be done by a vehicle (technician) that
            has the skills `drilling_machine` AND `screw_driver` in its skill array.
            Otherwise it remains unassigned.'
          example:
          - drilling_machine
          - screw_driver
          items:
            type: string
          type: array
        allowed_vehicles:
          description: 'Specifies an array of allowed vehicles, i.e. array of vehicle
            ids. For example, if this shipment can only be conducted EITHER by "technician_peter"
            OR "technician_stefan" specify this as follows: ["technician_peter","technician_stefan"].'
          example:
          - technician_peter
          - technician_stefan
          items:
            type: string
          type: array
        disallowed_vehicles:
          description: Specifies an array of disallowed vehicles, i.e. array of vehicle
            ids.
          example:
          - driver-A
          - driver-B
          items:
            type: string
          type: array
        max_time_in_vehicle:
          description: Specifies the maximum time in seconds a shipment can stay in
            the vehicle.
          example: 1800
          format: int64
          type: integer
      required:
      - delivery
      - id
      - pickup
      type: object
    Pickup:
      $ref: '#/components/schemas/Stop'
    Stop:
      properties:
        address:
          $ref: '#/components/schemas/Address'
        duration:
          default: 0
          description: Specifies the duration of the pickup or delivery in seconds,
            e.g. how long it takes unload items at the customer site.
          example: 1800
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        preparation_time:
          default: 0
          description: Specifies the preparation time in seconds. It can be used to
            model parking lot search time since if you have 3 identical locations
            in a row, it only falls due once.
          example: 300
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        time_windows:
          description: 'Specifies an array of time window objects (see time window
            object below). For example, if an item needs to be delivered between 7am
            and 10am then specify the array as follows: [ { "earliest": 25200, "latest"
            : 32400 } ] (starting the day from 0 in seconds).'
          example:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          items:
            $ref: '#/components/schemas/TimeWindow'
          type: array
        group:
          description: Group this stop belongs to. See the group relation and [this
            post](https://discuss.graphhopper.com/t/4040) on how to utilize this.
          example: ASAP
          type: string
      type: object
    TimeWindow:
      properties:
        earliest:
          default: 0
          description: Specifies the opening time of the time window in seconds, i.e.
            the earliest time the service can start.
          format: int64
          type: integer
        latest:
          description: Specifies the closing time of the time window in seconds, i.e.
            the latest time the service can start.
          format: int64
          type: integer
      type: object
    Configuration:
      description: Specifies general configurations that are taken into account when
        solving the vehicle routing problem.
      properties:
        routing:
          $ref: '#/components/schemas/Routing'
      type: object
    Routing:
      description: This contains all routing specific configurations.
      properties:
        calc_points:
          default: false
          description: It lets you specify whether the API should provide you with
            route geometries for vehicle routes or not. Thus, you do not need to do
            extra routing to get the polyline for each route.
          type: boolean
        consider_traffic:
          default: false
          description: indicates whether historical traffic information should be
            considered
          type: boolean
        network_data_provider:
          default: openstreetmap
          description: specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles).
          enum:
          - openstreetmap
          - tomtom
          type: string
        curbside_strictness:
          default: soft
          description: In some cases curbside constraints cannot be fulfilled. For
            example in one-way streets you cannot arrive at a building that is on
            the left side of the street such that the building is to the right of
            you (unless you drove the one-way street the wrong/illegal way). You can
            set the `curbside_strictness` to `soft` to ignore the curbside constraint
            in such cases or set it to `strict` to get an error response instead.
            You can also set it to `ignore` to ignore all curbside constraints (this
            is useful to compare the results with and without constraints without
            modifying every single address).
          enum:
          - ignore
          - soft
          - strict
          type: string
        fail_fast:
          default: true
          description: indicates whether matrix calculation should fail fast when
            points cannot be connected
          type: boolean
        return_snapped_waypoints:
          default: false
          description: Indicates whether a solution includes snapped waypoints. In
            contrary to the address coordinate a snapped waypoint is the access point
            to the (road) network.
          type: boolean
        snap_preventions:
          description: Prevents snapping locations to road links of specified road
            types, e.g. to motorway.
          example:
          - motorway
          - trunk
          - bridge
          - tunnel
          - ferry
          items:
            enum:
            - motorway
            - trunk
            - bridge
            - ford
            - tunnel
            - ferry
            type: string
          type: array
      type: object
    Objective:
      example:
        type: min
        value: vehicles
      properties:
        type:
          default: min
          description: |
            Type of objective function, i.e. `min` or `min-max`.

             * `min`: Minimizes the objective value.
             * `min-max`: Minimizes the maximum objective value.

            For instance, `min` -> `vehicles` minimizes the number of employed vehicles.
            `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.

            If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.
            This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.
            If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that
            the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours
            to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,
            this usually comes with higher transport costs.

            If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:

            ```json
            "objectives" : [
               {
                  "type": "min",
                  "value": "vehicles"
               },
               {
                  "type": "min",
                  "value": "completion_time"
               }
            ]
            ```

            If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:

            ```json
            "objectives" : [
               {
                  "type": "min-max",
                  "value": "completion_time"
               },
               {
                  "type": "min-max",
                  "value": "activities"
               }
            ]
            ```
          enum:
          - min
          - min-max
          type: string
        value:
          default: transport_time
          description: |
            The value of the objective function.
            The objective value `transport_time` solely considers the time
            your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account.
            The `completion_time` of a route is defined as the time from starting to ending the route,
            i.e. the route's transport time, the sum of waiting times plus the sum of activity durations.
            Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in
            scenarios with time windows waiting times can occur.
            The objective value `vehicles` can only be used along with `min` and minimizes vehicles.
          enum:
          - completion_time
          - transport_time
          - vehicles
          - activities
          type: string
      required:
      - type
      - value
      type: object
    CostMatrix:
      properties:
        type:
          description: type of cost matrix, currently default or google are supported
          enum:
          - default
          - google
          type: string
        location_ids:
          items:
            type: string
          type: array
        data:
          $ref: '#/components/schemas/CostMatrix_data'
        profile:
          description: vehicle profile or empty if catch all fallback
          type: string
      type: object
    GroupRelation:
      properties:
        type:
          description: |
            Specifies the type of relation. It must be either of type `in_sequence` or `in_direct_sequence`.
          example: in_direct_sequence
          type: string
        groups:
          description: An array of groups that should be related
          example:
          - group-A
          - group-B
          items:
            description: group of services or shipments
            type: string
          type: array
      required:
      - groups
      - type
      type: object
    JobRelation:
      properties:
        type:
          description: |+
            Specifies the type of relation. It must be either of type `in_same_route`, `in_sequence` or `in_direct_sequence`.

            `in_same_route`: As the name suggest, it enforces the specified services or shipments to be in the same route. It can be specified as follows:

            ```json
            {
               "type": "in_same_route",
               "ids": ["serv_i_id","serv_j_id"]
            }
            ```

            This enforces service i to be in the same route as service j no matter which vehicle will be employed. If a specific vehicle (driver) is required to conduct this, just add a `vehicle_id` like this:

            ```
            {
               "type": "in_same_route",
               "ids": ["serv_i_id","serv_j_id"],
               "vehicle_id": "vehicle1"
            }
            ```

            This not only enforce service i and j to be in the same route, but also makes sure that both services are in the route of `vehicle1`.

            *Tip*: This way initial loads and vehicle routes can be modelled. For example, if your vehicles are already on the road and new orders come in, then vehicles can still be rescheduled subject to the orders that have already been assigned to these vehicles.



            `in_sequence`: This relation type enforces n jobs to be in sequence. It can be specified as

            ```json
            {
               "type": "in_sequence",
               "ids": ["serv_i_id","serv_j_id"]
            }
            ```

            which means that service j need to be in the same route as service i AND it needs to occur somewhere after service i. As described above if a specific vehicle needs to conduct this, just add `vehicle_id`.


            `in_direct_sequence`: This enforces n services or shipments to be in direct sequence. It can be specified as

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["serv_i_id","serv_j_id","serv_k_id"]
            }
            ```

            yielding service j to occur directly after service i, and service k to occur directly after service j i.e. in strong order. Again, a vehicle can be assigned a priority by adding a `vehicle_id` to the relation.


            *Special IDs*:
            If you look at the previous example and you want service i to be the first in the route, use the special ID `start` as follows:

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["start","serv_i_id","serv_j_id","serv_k_id"]
            }
            ```

            Latter enforces the direct sequence of i, j and k at the beginning of the route. If this sequence should be bound to the end of the route, use the special ID `end` like this:

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["serv_i_id","service_j_id","serv_k_id","end"]
            }
            ```

            If you deal with services then you need to use the 'id' of your services in the field 'ids'. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use the shipment id plus the keyword `_pickup` or `_delivery`. For example, to ensure that the pickup and delivery of the shipment with the id 'my_shipment' are direct neighbors, you need the following specification:

            ```
            {
               "type": "in_direct_sequence",
               "ids": ["my_ship_pickup","my_ship_delivery"]
            }
            ```

          example: in_direct_sequence
          type: string
        ids:
          description: Specifies an array of shipment and/or service ids that are
            in relation. If you deal with services then you need to use the id of
            your services in ids. To also consider sequences of the pickups and deliveries
            of your shipments, you need to use a special ID, i.e. use your shipment
            id plus the keyword `_pickup` or `_delivery`. If you want to place a service
            or shipment activity at the beginning of your route, use the special ID
            `start`. In turn, use `end` to place it at the end of the route.
          example:
          - pickup-1
          - pickup-2
          items:
            type: string
          type: array
        vehicle_id:
          description: Id of pre-assigned vehicle, i.e. the vehicle id that is determined
            to conduct the services and shipments in this relation.
          example: driver-Peter
          type: string
      required:
      - ids
      - type
      type: object
    Response:
      example:
        $ref: examples/routeOptimizationResponse.json
      properties:
        copyrights:
          example:
          - GraphHopper
          - OpenStreetMap contributors
          items:
            description: Attribution
            type: string
          type: array
        status:
          description: Indicates the current status of the job
          enum:
          - waiting_in_queue
          - processing
          - finished
          example: finished
          type: string
        waiting_time_in_queue:
          description: Waiting time in ms
          example: 300000
          format: int64
          type: integer
        processing_time:
          description: Processing time in ms. If job is still waiting in queue, processing_time
            is 0
          example: 900000
          format: int64
          type: integer
        solution:
          $ref: '#/components/schemas/Solution'
      type: object
    Solution:
      description: Only available if status field indicates `finished`.
      properties:
        costs:
          deprecated: true
          format: int32
          type: integer
        distance:
          description: Overall distance travelled in meter, i.e. the sum of each route's
            transport distance
          example: 1200
          format: int32
          type: integer
        time:
          deprecated: true
          description: Use `transport_time` instead.
          format: int64
          type: integer
        transport_time:
          description: Overall time travelled in seconds, i.e. the sum of each route's
            transport time.
          example: 12000
          format: int64
          type: integer
        max_operation_time:
          description: Operation time of longest route in seconds.
          example: 4000
          format: int64
          type: integer
        waiting_time:
          description: Overall waiting time in seconds.
          example: 200
          format: int64
          type: integer
        service_duration:
          description: Overall service time in seconds.
          example: 1200
          format: int64
          type: integer
        preparation_time:
          description: Overall preparation time in seconds.
          format: int64
          type: integer
        completion_time:
          description: Overall completion time in seconds, i.e. the sum of each routes/drivers
            operation time.
          example: 12000
          format: int64
          type: integer
        no_vehicles:
          description: Number of employed vehicles.
          example: 10
          format: int32
          type: integer
        no_unassigned:
          description: Number of jobs that could not be assigned to final solution.
          example: 1
          format: int32
          type: integer
        routes:
          description: An array of routes
          items:
            $ref: '#/components/schemas/Route'
          type: array
        unassigned:
          $ref: '#/components/schemas/Solution_unassigned'
      type: object
    Detail:
      properties:
        id:
          description: Id of unassigned service/shipment
          type: string
        code:
          description: |
            Reason code

            Code   |  Reason
            :------|:---------
            1 | cannot serve required skill
            2 | cannot be visited within time window
            3 | does not fit into any vehicle due to capacity
            4 | cannot be assigned due to max distance constraint of vehicles
            21 | could not be assigned due to relation constraint
            22 | could not be assigned due to allowed vehicle constraint
            23 | could not be assigned due to max-time-in-vehicle constraint
            24 | driver does not need a break
            25 | could not be assigned due to disallowed vehicle constraint
            26 | could not be assigned due to max drive time constraint
            27 | could not be assigned due to max job constraint
            28 | could not be assigned due to max activity constraint
            50 | underlying location cannot be accessed over road network by at least one vehicle
          format: int32
          type: integer
        reason:
          description: Human readable reason as listed above
          type: string
      type: object
    Route:
      properties:
        vehicle_id:
          description: Id of vehicle that operates route
          example: driver-stefan
          type: string
        distance:
          description: Distance of route in meter
          example: 10000
          format: int64
          type: integer
        transport_time:
          description: Transport time of route in seconds
          example: 1800
          format: int64
          type: integer
        completion_time:
          description: Completion time of route in seconds
          example: 1800
          format: int64
          type: integer
        waiting_time:
          description: Waiting time of route in seconds
          format: int64
          type: integer
        service_duration:
          description: Service duration of route in seconds
          format: int64
          type: integer
        preparation_time:
          description: Preparation time of route in seconds
          format: int64
          type: integer
        activities:
          description: Array of activities
          example:
          - type: start
            location_id: berlin
            address:
              location_id: berlin
              lat: 52.537
              lon: 13.406
            end_time: 1551122400
            end_date_time: 2019-02-25T20:20+01:00
            distance: 0
            driving_time: 0
            preparation_time: 0
            waiting_time: 0
            load_after:
            - 0
          - type: service
            id: berlin-2
            location_id: 13.408642_52.527094
            address:
              location_id: 13.408642_52.527094
              lat: 52.527094
              lon: 13.408642
            arr_time: 1551122713
            arr_date_time: 2019-02-25T20:25:13+01:00
            end_time: 1551122713
            end_date_time: 2019-02-25T20:25:13+01:00
            waiting_time: 0
            distance: 1777
            driving_time: 313
            preparation_time: 0
            load_before:
            - 0
            load_after:
            - 0
          - type: service
            id: berlin-1
            location_id: 13.398170_52.527303
            address:
              location_id: 13.398170_52.527303
              lat: 52.527303
              lon: 13.39817
            arr_time: 1551122864
            arr_date_time: 2019-02-25T20:27:44+01:00
            end_time: 1551122864
            end_date_time: 2019-02-25T20:27:44+01:00
            waiting_time: 0
            distance: 2562
            driving_time: 464
            preparation_time: 0
            load_before:
            - 0
            load_after:
            - 0
          - type: end
            location_id: berlin
            address:
              location_id: berlin
              lat: 52.537
              lon: 13.406
            arr_time: 1551123189
            arr_date_time: 2019-02-25T20:33:09+01:00
            distance: 4334
            driving_time: 789
            preparation_time: 0
            waiting_time: 0
            load_before:
            - 0
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        points:
          description: Array of route planning points
          example:
          - coordinates:
            - - 13.4061
              - 52.53701
            - - 13.40643
              - 52.53634
            - - 13.4067
              - 52.53573
            - - 13.40722
              - 52.53479
            - - 13.40729
              - 52.53468
            - - 13.40735
              - 52.53463
            - - 13.41205
              - 52.53275
            - - 13.41245
              - 52.53264
            - - 13.41218
              - 52.53166
            - - 13.41205
              - 52.53139
            - - 13.41177
              - 52.53112
            - - 13.41072
              - 52.53033
            - - 13.41049
              - 52.53014
            - - 13.4098
              - 52.52928
            - - 13.40937
              - 52.5287
            - - 13.40994
              - 52.52858
            - - 13.41032
              - 52.52782
            - - 13.41054
              - 52.52745
            - - 13.41097
              - 52.52656
            - - 13.41107
              - 52.5265
            - - 13.41119
              - 52.52614
            - - 13.41119
              - 52.52604
            - - 13.41109
              - 52.52587
            - - 13.40971
              - 52.52631
            - - 13.40981
              - 52.52659
            - - 13.40891
              - 52.52683
            - - 13.40852
              - 52.52695
            type: LineString
          - coordinates:
            - - 13.40852
              - 52.52695
            - - 13.4081
              - 52.52706
            - - 13.40802
              - 52.52696
            - - 13.40469
              - 52.52758
            - - 13.4033
              - 52.52781
            - - 13.40331
              - 52.52767
            - - 13.40298
              - 52.52763
            - - 13.40261
              - 52.52807
            - - 13.39818
              - 52.52726
            type: LineString
          - coordinates:
            - - 13.39818
              - 52.52726
            - - 13.39808
              - 52.52725
            - - 13.39785
              - 52.52768
            - - 13.39727
              - 52.52866
            - - 13.39762
              - 52.52876
            - - 13.3976
              - 52.52914
            - - 13.39756
              - 52.52943
            - - 13.39597
              - 52.53243
            - - 13.39777
              - 52.5325
            - - 13.39843
              - 52.53254
            - - 13.39891
              - 52.53259
            - - 13.40288
              - 52.53354
            - - 13.40297
              - 52.53359
            - - 13.40338
              - 52.534
            - - 13.40466
              - 52.53419
            - - 13.40433
              - 52.53503
            - - 13.40443
              - 52.53511
            - - 13.40541
              - 52.53611
            - - 13.40547
              - 52.53615
            - - 13.40643
              - 52.53634
            - - 13.4061
              - 52.53701
            type: LineString
          items:
            $ref: '#/components/schemas/RoutePoint'
          type: array
      type: object
    RoutePoint:
      properties:
        type:
          type: string
        coordinates:
          items:
            type: object
          type: array
      type: object
    Activity:
      properties:
        type:
          description: type of activity
          enum:
          - start
          - end
          - service
          - pickupShipment
          - deliverShipment
          - pickup
          - delivery
          - break
          type: string
        id:
          description: Id referring to the underlying service or shipment, i.e. the
            shipment or service this activity belongs to
          type: string
        location_id:
          description: Id that refers to address
          type: string
        address:
          $ref: '#/components/schemas/ResponseAddress'
        arr_time:
          description: Arrival time at this activity in seconds. If type is `start`,
            this is not available (since it makes no sense to have `arr_time` at start).
            However, `end_time` is available and actually means \"departure time\"
            at start location. It is important to note that `arr_time` does not necessarily
            mean \"start of underlying activity\", it solely means arrival time at
            activity location. If this activity has no time windows and if there are
            no further preparation times, `arr_time` is equal to activity start time.
          format: int64
          type: integer
        end_time:
          description: End time of and thus departure time at this activity. If type
            is `end`, this is not available (since it makes no sense to have an `end_time`
            at end) `end_time` at each activity is equal to the departure time at
            the activity location.
          format: int64
          type: integer
        end_date_time:
          description: End date time with offset like this 1970-01-01T01:00+01:00.
            If you do not use time-dependent optimization, this is `null`.
          format: date-time
          type: string
        arr_date_time:
          description: Arrival date time with offset like this 1970-01-01T01:00+01:00.
            If you do not use time-dependent optimization, this is `null`.
          format: date-time
          type: string
        waiting_time:
          description: Waiting time at this activity in seconds. A waiting time can
            occur if the activity has at least one time window. If `arr_time` < `time_window.earliest`
            a waiting time of `time_window_earliest` - `arr_time` occurs.
          format: int64
          type: integer
        preparation_time:
          description: preparation time at this activity in seconds
          format: int64
          type: integer
        distance:
          description: cumulated distance from start to this activity in m
          format: int64
          type: integer
        driving_time:
          description: cumulated driving time from start to this driver activity in
            seconds
          format: int64
          type: integer
        load_before:
          description: Array with size/capacity dimensions before this activity
          items:
            description: dimension value
            format: int32
            type: integer
          type: array
        load_after:
          description: Array with size/capacity dimensions after this activity
          items:
            description: dimension value
            format: int32
            type: integer
          type: array
      type: object
    inline_response_404:
      properties:
        message:
          description: Error message
          example: Invalid job_id 73314c89-ee4b-459c-aca4-0ad6d6e558da
          type: string
        status:
          default: finished
          description: status
          example: finished
          type: string
      type: object
    MatrixResponse_hints:
      properties:
        message:
          description: Short description of this hint
          type: string
        details:
          description: Details of this hint
          type: string
        invalid_from_points:
          description: Optional. An array of from_point indices of points that could
            not be found. Will only be added if `fail_fast=false` and some `from_point`s
            were not found.`
          items:
            format: int32
            type: number
          type: array
        invalid_to_points:
          description: Optional. An array of to_point indices of points that could
            not be found. Will only be added if `fail_fast=false` and some `to_point`s
            were not found.`
          items:
            format: int32
            type: number
          type: array
        point_pairs:
          description: Optional. An array of two-element arrays representing the from/to_point
            indices of points for which no connection could be found. Will only be
            added if `fail_fast=false` and some connections were not found.
          items:
            items:
              format: int32
              type: number
            type: array
          type: array
      type: object
    RouteResponsePath_instructions:
      properties:
        text:
          description: |
            A description what the user has to do in order to follow the route. The language depends on the locale parameter.
          type: string
        street_name:
          description: |
            The name of the street to turn onto in order to follow the route.
          type: string
        distance:
          description: |
            The distance for this instruction, in meters.
          format: double
          type: number
        time:
          description: |
            The duration for this instruction, in milliseconds.
          format: int32
          type: integer
        interval:
          description: |
            Two indices into `points`, referring to the beginning and the end of the segment of the route
            this instruction refers to.
          items:
            format: int32
            type: integer
          type: array
        sign:
          description: |
            A number which specifies the sign to show:

            | sign | description  |
            |---|---|
            |-98| an U-turn without the knowledge if it is a right or left U-turn |
            | -8| a left U-turn |
            | -7| keep left |
            | -6| **not yet used**: leave roundabout |
            | -3| turn sharp left |
            | -2| turn left |
            | -1| turn slight left |
            |  0| continue on street |
            |  1| turn slight right |
            |  2| turn right |
            |  3| turn sharp right |
            |  4| the finish instruction before the last point |
            |  5| the instruction before a via point |
            |  6| the instruction before entering a roundabout |
            |  7| keep right |
            |  8| a right U-turn |
            |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
          format: int32
          type: integer
        exit_number:
          description: |
            Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
          format: int32
          type: integer
        turn_angle:
          description: |
            Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
            `-2*PI < r < 0` for counterclockwise turns.
          format: double
          type: number
      type: object
    IsochroneResponsePolygon_properties:
      properties:
        bucket:
          format: int32
          type: integer
      type: object
    GHError_hints:
      properties:
        message:
          type: string
      type: object
    CostMatrix_data_info:
      description: Additional information for your request
      properties:
        copyrights:
          items:
            type: string
          type: array
        took:
          format: double
          type: number
      type: object
    CostMatrix_data:
      description: JSON data of matrix response
      properties:
        times:
          items:
            items:
              format: int64
              type: integer
            type: array
          minItems: 1
          type: array
        distances:
          items:
            items:
              format: double
              type: number
            type: array
          minItems: 1
          type: array
        info:
          $ref: '#/components/schemas/CostMatrix_data_info'
      type: object
    Solution_unassigned:
      properties:
        services:
          description: An array of ids of unassigned services
          example:
          - service-1
          - service-3
          items:
            description: Id of unassigned service
            type: string
          type: array
        shipments:
          description: An array of ids of unassigned shipments
          example:
          - shipment-5
          items:
            description: Id of unassigned shipments
            type: string
          type: array
        breaks:
          description: An array of ids of unassigned breaks
          items:
            description: Id of unassigned breaks
            type: string
          type: array
        details:
          description: An array of details, i.e. reason for unassigned services or
            shipments
          example:
          - id: service-1
            code: 3
            reason: does not fit into any vehicle due to capacity
          - id: service-2
            code: 27
            reason: could not be assigned due to max job constraint
          - id: shipment-5
            code: 2
            reason: cannot be visited within time window
          items:
            $ref: '#/components/schemas/Detail'
          type: array
      type: object
  securitySchemes:
    api_key:
      in: query
      name: key
      type: apiKey
